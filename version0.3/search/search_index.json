{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"What is DTaaS","text":"<p>The Digital Twin as a Service (DTaaS) software platform is useful to  Build, Use and Share  digital twins (DTs).</p> <p> Build: The DTs are built on the software platform using the reusable DT components available on the platform.</p> <p> Use: Use the DTs on the software platform.</p> <p> Share: Share ready to use DTs with other users. It is also possible to share the services offered by one DT with other users.</p> <p>There is an overview of the software available in the form of slides, video, and feature walkthrough.</p>"},{"location":"index.html#license","title":"License","text":"<p>This software is owned by The INTO-CPS Association and is available under the INTO-CPS License.</p> <p>The DTaaS software platform uses Tr\u00e6fik, ML Workspace, Grafana, InfluxDB, MQTT and RabbitMQ open-source components. These software components have their own licenses.</p>"},{"location":"FAQ.html","title":"Frequently Asked Questions","text":""},{"location":"FAQ.html#abreviations","title":"Abreviations","text":"Term Full Form DT Digital Twin DTaaS Digital Twin as a Service PT Physical Twin"},{"location":"FAQ.html#general-questions","title":"General Questions","text":"What is DTaaS? <p>DTaaS is software platform on which you can create and run digital twins. Please see the features page to get a sense of the things you can do in DaaS.</p> Are there any Key Performance / Capability Indicators for DTaaS? Key Performance Indicator Value Processor Two AMD EPYC 7443 24-Core Processors Maximum Storage Capacity 4TB SSD, RAID 0 configuration Storage Type File System Maximum file size 10 GB Data transfer speed 100 Mbps Data Security Yes Data Privacy Yes Redundancy None Availability It is a matter of human resources. If you have human resources to maintain DTaaS round the clock, upwards 95% is easily possible. Do you provide licensed software like Matlab? <p>The licensed software are not available on the software platform. But users have private workspaces which are based on Linux-based xfce Desktop environment. Users can install software in their workspaces. The licensed software installed by one user is not available to another user.</p>"},{"location":"FAQ.html#digital-twin-models","title":"Digital Twin Models","text":"Can DTaaS create new DT models? <p>DTaaS is not a model creation  tool. You can put model creation tool inside DTaaS and create new models. The DTaaS itself does not create digital twin models but it can help users create digital twin models. You can run Linux desktop / terminal tools  inside the DTaaS. So you can create models inside DTaaS and run them using tools that can run in Linux. The Windows only tools can not run in DTaaS.</p> How can DTaaS help to design geometric model? Does it support 3D modeling and simulation? <p>Well, DTaaS by itself does not produce any models. DTaaS only provides a platform and an ecosystem of services to facilitate digital twins to be run as services. Since each user has a Linux OS at their disposal, they can also run digital twins that have graphical interface. In summary, DTaaS is neither a modeling nor simulation tool. If you need these kinds of tools, you need to bring them onto the platform. For example, if you need Matlab for your work, you need to bring he licensed Matlab software.</p> Commercial DT platforms in market provide modelling and simulation alongside integration and UI. DTaas is not able to do any modelling or simulation on its own like other commercial platforms. Is this a correct understanding? <p>Yes, you are right</p> Can DTaaS support only the information models (or behavioral models) or some other kind of models? <p>The DTaaS as such is agnostic to the kind of models you use. DTaaS can run all kinds of models. This includes behavioral and data models. As long as you have models and the matching solvers that can run in Linux OS, you are good to go in DTaaS. In some cases, models and solvers (tools) are bundled together to form monolithic DTs. The DTaaS does not limit you from running such DTs as well. DTaaS does not provide dedicated solvers. But if you can install a solver in your workspace, then you don't need the platform to provide one.</p> Does it support XML-based representation and ontology representation? <p>Currently No. We are looking for users needing this capability. If you have concrete requirements and an example, we can discuss a way of realizing it in DTaaS.</p>"},{"location":"FAQ.html#communication-between-physical-twin-and-digital-twin","title":"Communication Between Physical Twin and Digital Twin","text":"How would you measure a physical entity like shape, size, weight, structure, chemical attributes etc. using DTaaS? Any specific technology used in this case? <p>The real measurements are done at physical twin which are then communicated to the digital twin. Any digital twin platform like DTaaS can only facilitate this communication of these measurements from physical twin. The DTaaS provides InfluxDB, RabbitMQ and Mosquitto services for this purpose. These three are probably most widely used services for digital twin communication. Having said that, DTaaS allows you to utilize other communication technologies and services hosted elsewhere on the Internet.</p> How a real-time data can be differed from static data and what is the procedure to identify dynamic data? Is there any UI or specific tool used here? <p>DTaaS can not understand the static or dynamic nature of data. It can facilitate storing names, units and any other text description of interesting quantities (weight of batter, voltage output etc). It can also store the data being sent by the physical twin. The distinction between static and dynamic data needs to be made by the user. Only metadata of the data can reveal such more information about the nature of data. A tool can probably help in very specific cases, but you need metadata. If there is a human being making this distinction, then the need for metadata goes down but does not completely go away. In some of the DT platforms supported by manufacturers, there is a tight integration between data and model. In this case, the tool itself is taking care of the metadata. The DTaaS is a generic platform which can support execution of digital twins. If a tool can be executed on a Linux desktop / commandline, the tool can be supported within DTaaS. The tool (ex. Matlab) itself can take care of the metadata requirements.</p> How can DTaaS control the physical entity? Which technologies it uses for controlling the physical world? <p>At a very abstract level, there is a communication from physical entity to digital entity and back to physical entity. How this communication should happen is decided by the person designing the digital entity. The DTaaS can provide communication services that can help you do this communication with relative ease. You can use InfluxDB, RabbitMQ and Mosquitto services hosted on DTaaS for two communication between digital and physical entities.</p>"},{"location":"FAQ.html#data-management","title":"Data Management","text":"Does DTaaS support data collection from different sources like hardware, software and network? Is there any user interface or any tracking instruments used for data collection? <p>The DTaaS provids InfluxDB, RabbitMQ, MQTT  services. Both the physical twin and digital twin can utilize these protocols for communication. The IoT (time-series) data can be collected using InfluxDB and MQTT broker services. There is a user interface for InfluxDB which can be used to analyze the data collected. Users can also manually upload their data files into DTaaS.</p> Which transmission protocol does DTaaS allow? <p>InfluxDB, RabbitMQ, MQTT and anything else that can be used from Cloud service providers.</p> Does DTaaS support multisource information and combined multi sensor input data? Can it provide analysis and decision-supporting inferences? <p>You can store information from multiple sources. The existing InfluxDB services hosted on DTaaS already has a dedicated Influx / Flux query language for doing sensor fusion, analysis and inferences.</p> Which kinds of visualization technologies DTaaS can support (e.g. graphical, geometry, image, VR/AR representation)? <p>Graphical, geometric and images. If you need specific licensed software for the visualization, you will have to bring the license for it. DTaaS does not support AR/VR.</p> Can DTaaS collect data directly from sensors? <p>Yes</p> Is DTaaS able to transmit data to cloud in real time? <p>Yes</p>"},{"location":"FAQ.html#platform-native-services-on-dtaas-platform","title":"Platform Native Services on DTaaS Platform","text":"Is DTaaS able to detect the anomalies about-to-fail components and prescribe solutions? <p>This is the job of a digital twin. If you have a ready to use digital twin that does the job, DTaaS allows others to use your solution.</p>"},{"location":"FAQ.html#comparison-with-other-dt-platforms","title":"Comparison with other DT Platforms","text":"All the DT platforms seem to provide different features. Is there a comparison chart? <p>Here is a qualitative comparison of different DT integration platforms:</p> <p>Legend: high performance (H), mid performance (M) and low performance (L)</p> DT Platforms License DT Development Process Connectivity Security Processing power, performance and Scalability Data Storage Visualization Modeling and Simulation Microsoft Azure DT Commercial Cloud H H H M H H H AWS IOT Greengrass Open source commercial H H H M H H H Eclipse Ditto Open source M H M H H L L Asset Administration Shell Open source H H L H M L M PTC Thingworx Commercial H H H H H M M GE Predix Commercial M H H M L M L AU's DTaaS Open source H H L L M M M <p>Adopted by Tanusree Roy from Table 4 and 5 of the following paper.</p> <p>Ref: Naseri, F., Gil, S., Barbu, C., Cetkin, E., Yarimca, G., Jensen, A. C., ... &amp; Gomes, C. (2023). Digital twin of electric vehicle battery systems: Comprehensive review of the use cases, requirements, and platforms. Renewable and Sustainable Energy Reviews, 179, 113280.</p> All the comparisons between DT platforms seems so confusing. Why? <p>The fundamental confusion comes from the fact that different DT platforms (Azure DT, GE Predix) provide different kind of DT capabilities. You can run all kinds of models natively in GE Predix. In fact you can run models even next to (on) PTs using GE Predix. But you cannot natively do that in Azure DT service. You have to do the leg work of integrating with other Azure services or third-party services to get the kind of capabilities that GE Predix natively provides in one interface. The takeaway is that we pick horses for the courses.</p>"},{"location":"FAQ.html#create-assets","title":"Create Assets","text":"Can DTaaS be used to create new DT assets? <p>The core feature of DTaaS software is to help users create DTs from assets already available in the library.  However, it is possible for users to take advantage of services available in their workspace to install asset authoring tools in their own workspace. These authoring tools can then be used to create and publish new assets. User workspaces are private and are not shared with other users. Thus any licensed software tools installed in their workspace is only available to them.</p>"},{"location":"FAQ.html#gdpr-concerns","title":"GDPR Concerns","text":"Does your platform adhere to GDPR compliance standards? If so, how? <p>The DTaaS software platform does not store any personal information of users. It only stores username to identify users and these usernames do not contain enough information to deduce the true identify of users.</p> Which security measures are deployed? How is data encrypted (if exists)? <p>The default installation requires a HTTPS terminating reverse proxy server from user to the DTaaS software installation. The administrators of DTaaS software can also install HTTPS certificates into the application. The codebase can generate HTTPS application and the users also have the option of installing their own certificates obtained from certification agencies such as LetsEncrypt.</p> What security measures does your cloud provider offer? <p>The current installation of DTaaS software runs on Aarhus University servers. The university network offers firewall access control to servers so that only permitted user groups have access to the network and physical access to the server.</p> How is user access controlled and authenticated? <p>There is a two-level authentication mechanism in place in each default installation of DTaaS. The first-level is HTTP basic authentication over secure HTTPS connection. The second-level is the OAuth PKCE authentication flow for each user. The OAuth authentication is provider by a Gitlab instance. The DTaaS does not store the account and authentication information of users.</p> Does you platform manage personal data? How is data classified and tagged based on the sensitivity? Who has access to the critical data? <p>The platform does not store personal data of users.</p> How are identities and roles managed within the platform? <p>There are two roles for users on the platform. One is the administrator and the other one is user. The user roles are managed by the administrator.</p>"},{"location":"LICENSE.html","title":"License","text":"<p>--- Start of Definition of INTO-CPS Association Public License ---</p> <p>/*</p> <ul> <li> <p>This file is part of the INTO-CPS Association.</p> </li> <li> <p>Copyright (c) 2017-CurrentYear, INTO-CPS Association (ICA),</p> </li> <li>c/o Peter Gorm Larsen, Aarhus University, Department of Engineering,</li> <li> <p>Finlandsgade 22, 8200 Aarhus N, Denmark.</p> </li> <li> <p>All rights reserved.</p> </li> <li> <p>THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR</p> </li> <li>THIS INTO-CPS ASSOCIATION PUBLIC LICENSE (ICAPL) VERSION 1.0.</li> <li>ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES</li> <li>RECIPIENT'S ACCEPTANCE OF THE INTO-CPS ASSOCIATION PUBLIC LICENSE OR</li> <li> <p>THE GPL VERSION 3, ACCORDING TO RECIPIENTS CHOICE.</p> </li> <li> <p>The INTO-CPS tool suite software and the INTO-CPS Association</p> </li> <li>Public License (ICAPL) are obtained from the INTO-CPS Association, either</li> <li>from the above address, from the URLs: http://www.into-cps.org or</li> <li>in the INTO-CPS tool suite distribution.</li> <li> <p>GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.</p> </li> <li> <p>This program is distributed WITHOUT ANY WARRANTY; without</p> </li> <li>even the implied warranty of  MERCHANTABILITY or FITNESS</li> <li>FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH</li> <li>IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF</li> <li> <p>THE INTO-CPS ASSOCIATION PUBLIC LICENSE.</p> </li> <li> <p>See the full ICAPL conditions for more details.</p> </li> </ul> <p>*/</p> <p>--- End of INTO-CPS Association Public License Header ---</p> <p>The ICAPL is a public license for the INTO-CPS tool suite with three modes/alternatives (GPL, ICA-Internal-EPL, ICA-External-EPL) for use and redistribution, in source and/or binary/object-code form:</p> <ul> <li> <p>GPL. Any party (member or non-member of the INTO-CPS Association) may use   and redistribute INTO-CPS tool suite under GPL version 3.</p> </li> <li> <p>Silver Level members of the INTO-CPS Association may also use and   redistribute the INTO-CPS tool suite under ICA-Internal-EPL conditions.</p> </li> <li> <p>Gold Level members of the INTO-CPS Association may also use and redistribute   The INTO-CPS tool suite under ICA-Internal-EPL or ICA-External-EPL conditions.</p> </li> </ul> <p>Definitions of the INTO-CPS Association Public license modes:</p> <ul> <li> <p>GPL = GPL version 3.</p> </li> <li> <p>ICA-Internal-EPL = These INTO-CPA Association Public license conditions   together with   Internally restricted EPL, i.e., EPL version 1.0 with the Additional Condition   that use and redistribution by a member of the INTO-CPS Association is only   allowed within the INTO-CPS Association member's own organization   (i.e., its own legal entity),   or for a member of the INTO-CPS Association paying a membership fee   corresponding to   the size of the organization including all its affiliates,   use and redistribution   is allowed within/between its affiliates.</p> </li> <li> <p>ICA-External-EPL = These INTO-CPA Association Public license conditions   together with   Externally restricted EPL, i.e., EPL version 1.0 with the Additional   Condition   that use and redistribution by a member of the INTO-CPS Association, or   by a Licensed   Third Party Distributor having a redistribution agreement with that member,   to parties external to the INTO-CPS Association member\u2019s own organization   (i.e., its own   legal entity) is only allowed in binary/object-code form, except the case of   redistribution to other members the INTO-CPS Association to which source is   also allowed to be distributed.</p> </li> </ul> <p>[This has the consequence that an external party who wishes to use the INTO-CPS Association in source form together with its own proprietary software in all cases must be a member of the INTO-CPS Association].</p> <p>In all cases of usage and redistribution by recipients, the following conditions also apply:</p> <p>a) Redistributions of source code must retain the above copyright notice,  all definitions, and conditions. It is sufficient if the ICAPL Header is  present in each source file, if the full ICAPL is available in a prominent  and easily located place in the redistribution.</p> <p>b) Redistributions in binary/object-code form must reproduce the above  copyright notice, all definitions, and conditions. It is sufficient if the  ICAPL Header and the location in the redistribution of the full ICAPL  are present in the documentation and/or other materials provided with the  redistribution, if the full ICAPL is available in a prominent and easily  located place in the redistribution.</p> <p>c) A recipient must clearly indicate its chosen usage mode of ICAPL,  in accompanying documentation and in a text file ICA-USAGE-MODE.txt,  provided with the distribution.</p> <p>d) Contributor(s) making a Contribution to the INTO-CPS Association thereby  also makes a  Transfer of Contribution Copyright. In return, upon the effective date of  the transfer, ICA grants the Contributor(s) a Contribution License of the  Contribution. ICA has the right to accept or refuse Contributions.</p> <p>Definitions:</p> <p>\"Subsidiary license conditions\" means:</p> <p>The additional license conditions depending on the by the recipient chosen mode of ICAPL, defined by GPL version 3.0 for GPL, and by EPL for ICA-Internal-EPL and ICA-External-EPL.</p> <p>\"ICAPL\" means:</p> <p>INTO-CPS Association Public License version 1.0, i.e., the license defined here (the text between \"--- Start of Definition of INTO-CPS Association Public License ---\" and \"--- End of Definition of INTO-CPS Association Public License ---\", or later versions thereof.</p> <p>\"ICAPL Header\" means:</p> <p>INTO-CPS Association Public License Header version 1.2, i.e., the text between \"--- Start of Definition of INTO-CPS Association Public License ---\" and \"--- End of INTO-CPS Association Public License Header ---, or later versions thereof.</p> <p>\"Contribution\" means:</p> <p>a) in the case of the initial Contributor, the initial code and documentation  distributed under ICAPL, and</p> <p>b) in the case of each subsequent Contributor:    i) changes to the INTO-CPS tool suite, and   ii) additions to the INTO-CPS tool suite;</p> <p>where such changes and/or additions to the INTO-CPS tool suite originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the INTO-CPS tool suite by such Contributor itself or anyone acting on such Contributor's behalf.</p> <p>For Contributors licensing the INTO-CPS tool suite under ICA-Internal-EPL or ICA-External-EPL conditions, the following conditions also hold:</p> <p>Contributions do not include additions to the distributed Program which: (i) are separate modules of software distributed in conjunction with the INTO-CPS tool suite under their own license agreement, (ii) are separate modules which are not derivative works of the INTO-CPS tool suite, and (iii) are separate modules of software distributed in conjunction with the INTO-CPS tool suite under their own license agreement where these separate modules are merged with (weaved together with) modules of The INTO-CPS tool suite to form new modules that are distributed as object code or source code under their own license agreement, as allowed under the Additional Condition of internal distribution according to ICA-Internal-EPL and/or Additional Condition for external distribution according to ICA-External-EPL.</p> <p>\"Transfer of Contribution Copyright\" means that the Contributors of a Contribution transfer the ownership and the copyright of the Contribution to the INTO-CPS Association, the INTO-CPS Association Copyright owner, for inclusion in the INTO-CPS tool suite. The transfer takes place upon the effective date when the Contribution is made available on the INTO-CPS Association web site under ICAPL, by such Contributors themselves or anyone acting on such Contributors' behalf. The transfer is free of charge. If the Contributors or the INTO-CPS Association so wish, an optional Copyright transfer agreement can be signed between the INTO-CPS Association and the Contributors.</p> <p>\"Contribution License\" means a license from the INTO-CPS Association to the Contributors of the Contribution, effective on the date of the Transfer of Contribution Copyright, where the INTO-CPS Association grants the Contributors a non-exclusive, world-wide, transferable, free of charge, perpetual license, including sublicensing rights, to use, have used, modify, have modified, reproduce and or have reproduced the contributed material, for business and other purposes, including but not limited to evaluation, development, testing, integration and merging with other software and distribution. The warranty and liability disclaimers of ICAPL apply to this license.</p> <p>\"Contributor\" means any person or entity that distributes (part of) the INTO-CPS tool chain.</p> <p>\"The Program\" means the Contributions distributed in accordance with ICAPL.</p> <p>\"The INTO-CPS tool chain\" means the Contributions distributed in accordance with ICAPL.</p> <p>\"Recipient\" means anyone who receives the INTO-CPS tool chain under ICAPL, including all Contributors.</p> <p>\"Licensed Third Party Distributor\" means a reseller/distributor having signed a redistribution/resale agreement in accordance with ICAPL and the INTO-CPS Association Bylaws, with a Gold Level organizational member which is not an Affiliate of the reseller/distributor, for distributing a product containing part(s) of the INTO-CPS tool suite. The Licensed Third Party Distributor shall only be allowed further redistribution to other resellers if the Gold Level member is granting such a right to it in the redistribution/resale agreement between the Gold Level member and the Licensed Third Party Distributor.</p> <p>\"Affiliate\" shall mean any legal entity, directly or indirectly, through one or more intermediaries, controlling or controlled by or under common control with any other legal entity, as the case may be. For purposes of this definition, the term \"control\" (including the terms \"controlling,\" \"controlled by\" and \"under common control with\") means the possession, direct or indirect, of the power to direct or cause the direction of the management and policies of a legal entity, whether through the ownership of voting securities, by contract or otherwise.</p> <p>NO WARRANTY</p> <p>EXCEPT AS EXPRESSLY SET FORTH IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF ICAPL, THE INTO-CPS ASSOCIATION IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the INTO-CPS tool suite and assumes all risks associated with its exercise of rights under ICAPL , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.</p> <p>DISCLAIMER OF LIABILITY</p> <p>EXCEPT AS EXPRESSLY SET FORTH IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF ICAPL, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE INTO-CPS TOOL SUITE OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <p>A Contributor licensing the INTO-CPS tool suite under ICA-Internal-EPL or ICA-External-EPL may choose to distribute (parts of) the INTO-CPS tool suite in object code form under its own license agreement, provided that:</p> <p>a) it complies with the terms and conditions of ICAPL; or for the case of redistribution of the INTO-CPS tool suite together with proprietary code it is a dual license where the INTO-CPS tool suite parts are distributed under ICAPL compatible conditions and the proprietary code is distributed under proprietary license conditions; and</p> <p>b) its license agreement:    i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;   ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;  iii) states that any provisions which differ from ICAPL are offered by that Contributor alone and not by any other party; and   iv) states from where the source code for the INTO-CPS tool suite is   available, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.</p> <p>When the INTO-CPS tool suite is made available in source code form:</p> <p>a) it must be made available under ICAPL; and</p> <p>b) a copy of ICAPL must be included with each copy of the INTO-CPS tool suite.</p> <p>c) a copy of the subsidiary license associated with the selected mode of ICAPL must be included with each copy of the INTO-CPS tool suite.</p> <p>Contributors may not remove or alter any copyright notices contained within The INTO-CPS tool suite.</p> <p>If there is a conflict between ICAPL and the subsidiary license conditions, ICAPL has priority.</p> <p>This Agreement is governed by the laws of Denmark. The place of jurisdiction for all disagreements related to this Agreement, is Aarhus, Denmark.</p> <p>The EPL 1.0 license definition has been obtained from: http://www.eclipse.org/legal/epl-v10.html. It is also reproduced in the INTO-CPS distribution.</p> <p>The GPL Version 3 license definition has been obtained from http://www.gnu.org/copyleft/gpl.html. It is also reproduced in the INTO-CPS distribution.</p> <p>--- End of Definition of INTO-CPS Association Public License ---</p>"},{"location":"PUBLISH.html","title":"Project Documentation","text":"<p>This file contains instructions for creation, compilation and publication of project documentation.</p> <p>The documentation system is based on Material for Mkdocs. The documentation is generated based on the configuration files:</p> <ul> <li>mkdocs.yml: used for generating online   documentation which is hosted on the web</li> <li>mkdocs-github.yml: used for generating documentation in github actions</li> </ul> <p>Install Mkdocs using the following command.</p> <pre><code>pip install -r docs/requirements.txt\n</code></pre>"},{"location":"PUBLISH.html#fix-linting-errors","title":"Fix Linting Errors","text":"<p>This project uses markdownlint linter tool for identifying the formatting issues in markdown files. Run</p> <pre><code>mdl docs\n</code></pre> <p>from top-directory of the project and fix any identified issues. This needs to be done before committing changes to the documentation.</p>"},{"location":"PUBLISH.html#create-documentation","title":"Create documentation","text":"<p>The document generation pipeline can generate both html and pdf versions of documentation.</p> <p>The generation of pdf version of documentation is controlled via a shell variable.</p> <pre><code>export MKDOCS_ENABLE_PDF_EXPORT=0 #disables generation of pdf document\nexport MKDOCS_ENABLE_PDF_EXPORT=1 #enables generation of pdf document\n</code></pre> <p>The <code>mkdocs</code> utility allows for live editing of documentation on the developer computer.</p> <p>You can add, and edit the markdown files in <code>docs/</code> directory to update the documentation. There is a facility to check the status of your documentation by using:</p> <pre><code>mkdocs serve --config-file mkdocs.yml\n</code></pre>"},{"location":"PUBLISH.html#publish-documentation","title":"Publish documentation","text":"<p>You can compile and place the html version of documentation on the <code>webpage-docs</code> branch of the codebase.</p> <pre><code>export MKDOCS_ENABLE_PDF_EXPORT=1 #enable generation of pdf document\nsource script/docs.sh [version]\n</code></pre> <p>The command takes an optional version parameter. This version parameter is needed for making a release. Otherwise, the documentation gets published with the latest version tag. This command makes a new commit on <code>webpage-docs</code> branch. You need to push the branch to upstream.</p> <pre><code>git push webpage-docs\n</code></pre> <p>The github pages system serves the project documentation from this branch.</p>"},{"location":"bugs.html","title":"Few issues in the Software","text":""},{"location":"bugs.html#some-limitations","title":"Some limitations","text":"<ul> <li>The complete DTaaS software requires   multiple docker containers and one client website.   All of these can work together only on a server with a proper domain name.   The complete application does not work on localhost.</li> </ul>"},{"location":"bugs.html#third-party-software","title":"Third-Party Software","text":"<ul> <li>We use third-party software which have certain   known issues. Some of the issues are listed below.</li> </ul>"},{"location":"bugs.html#ml-workspace","title":"ML Workspace","text":"<ul> <li>the docker container loses network connectivity after three days.   The only known solution is to restart the docker container.   You don't need to restart the complete DTaaS platform, restart of   the docker contaienr of ml-workspace is sufficient.</li> <li>the terminal tool doesn't seem to have the ability to refresh itself.   If there is an issue, the only solution is to close and   reopen the terminal from \"open tools\" drop down of notebook</li> <li>terminal app does not show at all after some time: terminal always   comes if it is open from drop-down menu of Jupyter Notebook,   but not as a direct link.</li> </ul>"},{"location":"bugs.html#gitlab","title":"Gitlab","text":"<ul> <li>The gilab oauth authentication service does not   have a way to sign out of a third-party application.   Even if you sign out of DTaaS, the gitlab still shows user as signed in.   The next time you click on the sign in button on the DTaaS page,   user is not shown the login page.   Instead user is directly taken to the Library page.   So close the brower window after you are done.   Another way to overcome this limitation is to open your   gitlab instance (<code>https://gitlab.foo.com</code>) and signout from there.   Thus user needs to sign out of two places, namely DTaaS and gitlab,   in order to completely exit the DTaaS application.</li> </ul>"},{"location":"thanks.html","title":"Contributors","text":"<p>code contributors</p>"},{"location":"thanks.html#users","title":"Users","text":"<p>Cl\u00e1udio \u00c2ngelo Gon\u00e7alves Gomes, Dmitri Tcherniak, Elif Ecem Bas, Giuseppe Abbiati, Hao Feng, Henrik Ejersbo, Tanusree Roy, Farshid Naseri</p>"},{"location":"thanks.html#documentation","title":"Documentation","text":"<ol> <li>Talasila, P., Gomes, C., Mikkelsen, P. H., Arboleda, S. G., Kamburjan,    E., &amp; Larsen, P. G. (2023).    Digital Twin as a Service (DTaaS): A Platform for    Digital Twin Developers and Users    arXiv preprint arXiv:2305.07244.</li> <li>Astitva Sehgal for developer and example documentation.</li> <li>Tanusree Roy and Farshid Naseri for asking interesting questions    that ended up in FAQs.</li> </ol>"},{"location":"admin/host.html","title":"DTaaS on Linux Operating System","text":"<p>These are installation instructions for running DTaaS application on a Ubuntu Server 22.04 Operating System. The setup requires a machine which can spare 16GB RAM, 8 vCPUs and 50GB Hard Disk space.</p> <p>A dummy foo.com URL has been used for illustration. Please change this to your unique website URL. It is assumed that you are going to serve the application in only HTTPS mode.</p> <p>A successful installation will create a setup similar to the one shown in the figure.</p> <p></p> <p>Please follow these steps to make this work in your local environment. Download the DTaaS.zip from the releases page. Unzip the same into a directory named DTaaS. The rest of the instructions assume that your working directory is DTaaS.</p> <p>Note</p> <p>If you only want to test the application and are not setting up a production instance, you can follow the instructions of trial installation.</p>"},{"location":"admin/host.html#configuration","title":"Configuration","text":"<p>You need to configure the Traefik gateway, library microservice and react client website.</p> <p>The first step is to decide on the number of users and their usenames. The traefik gateway configuration has a template for two users. You can modify the usernames in the template to the usernames chosen by you.</p>"},{"location":"admin/host.html#the-traefik-gateway-server","title":"The traefik gateway server","text":"<p>You can run the Run the Traefik gateway server in both HTTP and HTTPS mode to experience the DTaaS application. The installation guide assumes that you can run the application in HTTPS mode.</p> <p>The Traefik gateway configuration is at deploy/config/gateway/fileConfig.yml. Change <code>foo.com</code> to your local hostname and user1/user2 to the usernames chosen by you.</p> <p>Tip</p> <p>Do not use <code>http://</code> or <code>https://</code> in deploy/config/gateway/fileConfig.yml.</p>"},{"location":"admin/host.html#authentication","title":"Authentication","text":"<p>This step requires <code>htpasswd</code> commandline utility. If it is not available on your system, please install the same by using</p> <pre><code>sudo apt-get install -y apache2-utils\n</code></pre> <p>You can now proceed with update of the gateway authentication setup. The dummy username is <code>foo</code> and the password is <code>bar</code>. Please change this before starting the gateway.</p> <pre><code>rm deploy/config/gateway/auth\ntouch deploy/config/gateway/auth\nhtpasswd deploy/config/gateway/auth &lt;first_username&gt;\npassword: &lt;your password&gt;\n</code></pre> <p>The user credentials added in deploy/config/gateway/auth should match the usernames in deploy/config/gateway/fileConfig.yml.</p>"},{"location":"admin/host.html#configure-lib-microservice","title":"Configure lib microservice","text":"<p>The library microservice requires configuration. A template of this configuration file is given in deploy/config/lib file. Please modify this file as per your needs.</p> <p>The first step in this configuration is to prepare the a filesystem for users. An example file system in <code>files/</code> directory. You can rename the top-level user1/user2 to the usernames chosen by you.</p> <p>An example <code>.env</code> file is given below. The simplest possibility is to use <code>local</code> mode with the following example. The filepath is the absolute filepath to <code>files/</code> directory. You can copy this configuration into deploy/config/lib file to get started.</p> <pre><code>PORT='4001'\nMODE='local'\nLOCAL_PATH ='filepath'\nLOG_LEVEL='debug'\nAPOLLO_PATH='/lib'\nGRAPHQL_PLAYGROUND='true'\n</code></pre>"},{"location":"admin/host.html#configure-react-client-website","title":"Configure React Client Website","text":""},{"location":"admin/host.html#gitlab-oauth-application","title":"Gitlab OAuth application","text":"<p>The DTaaS react website requires Gitlab OAuth provider. If you need more help with this step, please see the Authentication page.</p> <p>You need the following information from the OAuth application registered on Gitlab:</p> Gitlab Variable Name Variable name in Client env.js Default Value OAuth Provider REACT_APP_AUTH_AUTHORITY https://gitlab.foo.com/ Application ID REACT_APP_CLIENT_ID Callback URL REACT_APP_REDIRECT_URI https://foo.com/Library Scopes REACT_APP_GITLAB_SCOPES openid, profile, read_user, read_repository, api <p>You can also see Gitlab help page for getting the Gitlab OAuth application details.</p>"},{"location":"admin/host.html#update-client-config","title":"Update Client Config","text":"<p>Change the React website configuration in deploy/config/client/env.js.</p> <pre><code>window.env = {\nREACT_APP_ENVIRONMENT: 'dev',\nREACT_APP_URL: 'https://foo.com/',\nREACT_APP_URL_BASENAME: 'dtaas',\nREACT_APP_URL_DTLINK: '/lab',\nREACT_APP_URL_LIBLINK: '',\nREACT_APP_WORKBENCHLINK_TERMINAL: '/terminals/main',\nREACT_APP_WORKBENCHLINK_VNCDESKTOP: '/tools/vnc/?password=vncpassword',\nREACT_APP_WORKBENCHLINK_VSCODE: '/tools/vscode/',\nREACT_APP_WORKBENCHLINK_JUPYTERLAB: '/lab',\nREACT_APP_WORKBENCHLINK_JUPYTERNOTEBOOK: '',\nREACT_APP_CLIENT_ID: '934b98f03f1b6f743832b2840bf7cccaed93c3bfe579093dd0942a433691ccc0',\nREACT_APP_AUTH_AUTHORITY: 'https://gitlab.foo.com/',\nREACT_APP_REDIRECT_URI: 'https://foo.com/Library',\nREACT_APP_LOGOUT_REDIRECT_URI: 'https://foo.com/',\nREACT_APP_GITLAB_SCOPES: 'openid profile read_user read_repository api',\n};\n</code></pre>"},{"location":"admin/host.html#update-the-installation-script","title":"Update the installation script","text":"<p>Open <code>deploy/install.sh</code> and update user1/user2 to usernames chosen by you.</p>"},{"location":"admin/host.html#perform-the-installation","title":"Perform the Installation","text":"<p>Go to the DTaaS directory and execute</p> <pre><code>source deploy/install.sh\n</code></pre> <p>You can run this script multiple times until the installation is successful.</p>"},{"location":"admin/host.html#access-the-application","title":"Access the application","text":"<p>Now you should be able to access the DTaaS application at: https://foo.com</p>"},{"location":"admin/host.html#references","title":"References","text":"<p>Image sources: Ubuntu logo, Traefik logo, ml-workspace, nodejs, reactjs, nestjs</p>"},{"location":"admin/overview.html","title":"Overview","text":""},{"location":"admin/overview.html#what-is-the-goal","title":"What is the goal","text":"<p>The goal is to set up the DTaaS infrastructure in order to enable your users to use the DTaaS. As an admin you will administrate the users and the servers of the system.</p>"},{"location":"admin/overview.html#what-are-the-requirements","title":"What are the requirements","text":""},{"location":"admin/overview.html#oauth-provider","title":"OAuth Provider","text":"<p>You need to have an OAuth Provider running, which the DTaaS can use for authentication. This is described further in the authentication section.</p>"},{"location":"admin/overview.html#domain-name","title":"Domain name","text":"<p>The DTaaS software can only be hosted on a server with a domain name like foo.com.</p>"},{"location":"admin/overview.html#reverse-proxy","title":"Reverse Proxy","text":"<p>The installation setup assumes that the foo.com server is behind a reverse proxy / load balancer that provides https termination. You can still use the DTaaS software even if you do not have this reverse proxy. If you do not have a reverse proxy, please replace https://foo.com with http://foo.com in client .env file and in OAuth registration. Other installation configuration remains the same.</p>"},{"location":"admin/overview.html#what-to-install","title":"What to install","text":"<p>The DTaaS can be installed in different ways. Each version is for different purposes:</p> <ul> <li>Trial installation on single host</li> <li>Production installation on single host</li> <li>On one or two   Vagrant virtual machines</li> <li>Seperater Packages: client website and   lib microservice</li> </ul> <p>Following the installation that fit your usecase.</p>"},{"location":"admin/services.html","title":"Third-party Services","text":"<p>The DTaaS software platform uses third-party software services to provide enhanced value to users.</p> <p>InfluxDB, Grafana, RabbitMQ and Mosquitto are default services integrated into the DTaaS software platform.</p>"},{"location":"admin/services.html#pre-requisites","title":"Pre-requisites","text":"<p>All these services run on raw TCP/UDP ports. Thus a direct network access to these services is required for both the DTs running inside the DTaaS software and the PT located outside the DTaaS software.</p> <p>There are two possible choices here:</p> <ul> <li>Configure Traefik gateway to permit TCP/UDP traffic</li> <li>Bypass Traefik altogether</li> </ul> <p>Unless you are an informed user of Traefik, we recommend bypassing traefik and provide raw TCP/UDP access to these services from the Internet.</p> <p>The InfluxDB service requires a dedicated hostname. The management interface of RabbitMQ service requires a dedicated hostname as well.</p> <p>Grafana service can run well behind Traefik gateway. The default Traefik configuration makes permits access to Grafana at URL: http(s): foo.com/vis.</p>"},{"location":"admin/services.html#configure-and-install","title":"Configure and Install","text":"<p>If you have not cloned the DTaaS git repository, cloning would be the first step. In case you already have the codebase, you can skip the cloning step. To clone, do:</p> <pre><code>git clone https://github.com/into-cps-association/DTaaS.git\ncd DTaaS/deploy/services\n</code></pre> <p>The next step in installation is to specify the config of the services. There are two configuration files. The services.yml contains most of configuration settings. The mqtt-default.conf file contains the MQTT listening port. Update these two config files before proceeding with the installation of the services.</p> <p>Now continue with the installation of services.</p> <pre><code>yarn install\nnode services.js\n</code></pre>"},{"location":"admin/services.html#use","title":"Use","text":"<p>After the installation is complete, you can see the following services active at the following ports / URLs.</p> service external url Influx services.foo.com Grafana services.foo.com:3000 RabbitMQ Broker services.foo.com:5672 RabbitMQ Broker Management Website services.foo.com:15672 MQTT Broker services.foo.com:1883 <p>The firewall and network access settings of corporate / cloud network need to be configured to allow external access to the services. Otherwise the users of DTaaS will not be able to utilize these services from their user workspaces.</p>"},{"location":"admin/trial.html","title":"Trial Installation","text":"<p>To try out the software, you can install it on Ubuntu Server 22.04 Operating System.  The setup requires a machine which can spare 16GB RAM, 8 vCPUs and 50GB Hard Disk space to the vagrant box. A successful installation will create a setup similar to the one shown in the figure.</p> <p></p> <p>A one-step installation script is provided on this page. This script sets up the DTaaS software with default credentials and users. You can use it to check a test installation of DTaaS software.</p>"},{"location":"admin/trial.html#pre-requisites","title":"Pre-requisites","text":""},{"location":"admin/trial.html#1-domain-name","title":"1. Domain name","text":"<p>You need a domain name to run the application. The install script assumes foo.com to be your domain name. You will change this after running the script.</p>"},{"location":"admin/trial.html#2-gitlab-oauth-application","title":"2. Gitlab OAuth application","text":"<p>The DTaaS react website requires Gitlab OAuth provider. If you need more help with this step, please see the Authentication page.</p> <p>You need the following information from the OAuth application registered on Gitlab:</p> Gitlab Variable Name Variable name in Client env.js Default Value OAuth Provider REACT_APP_AUTH_AUTHORITY https://gitlab.foo.com/ Application ID REACT_APP_CLIENT_ID Callback URL REACT_APP_REDIRECT_URI https://foo.com/Library Scopes REACT_APP_GITLAB_SCOPES openid, profile, read_user, read_repository, api <p>You can also see Gitlab help page for getting the Gitlab OAuth application details.</p>"},{"location":"admin/trial.html#install","title":"Install","text":"<pre><code>wget https://raw.githubusercontent.com/INTO-CPS-Association/DTaaS/release-v0.3/deploy/single-script-install.sh\nbash single-script-install.sh\n</code></pre> <p>Warning</p> <p>This test installation has default credentials and is thus highly insecure.</p>"},{"location":"admin/trial.html#post-install","title":"Post install","text":"<p>After the install-script. Please change foo.com and Gitlab OAuth details to your local settings in the following files.</p> <pre><code>~/DTaaS/client/build/env.js\n~/DTaaS/servers/config/gateway/dynamic/fileConfig.yml\n</code></pre>"},{"location":"admin/trial.html#sanity-check","title":"Sanity check","text":"<p>Now when you visit your domain, you should be able to login through your OAuth Provider and be able to access the DTaas web UI.</p>"},{"location":"admin/trial.html#references","title":"References","text":"<p>Image sources: Ubuntu logo, Traefik logo, ml-workspace, nodejs, reactjs, nestjs</p>"},{"location":"admin/client/CLIENT.html","title":"Host the DTaaS Client Website","text":"<p>To host DTaaS client website on your server, follow these steps:</p> <ul> <li>Download the DTaaS-client.zip from the   releases page.</li> <li> <p>Inside the <code>DTaaS-client</code> directory, there is <code>site</code> directory.   The <code>site</code> directory contains all the optimized   static files that are ready for deployment.</p> </li> <li> <p>Setup the oauth application on gitlab instance.   See the instructions in authentication page for completing this task.</p> </li> <li>Locate the file <code>site/env.js</code> and replace the example values to   match your infrastructure.   The constructed links will be   \"<code>REACT_APP_URL</code>/<code>REACT_APP_URL_BASENAME</code>/<code>{username}</code>/<code>{Endpoint}</code>\".   See the definitions below:</li> </ul> <pre><code>window.env = {\nREACT_APP_ENVIRONMENT: \"prod | dev\",\nREACT_APP_URL: \"URL for the gateway\",\nREACT_APP_URL_BASENAME: \"Base URL for the client website\"(optional),\nREACT_APP_URL_DTLINK: \"Endpoint for the Digital Twin\",\nREACT_APP_URL_LIBLINK: \"Endpoint for the Library Assets\",\nREACT_APP_WORKBENCHLINK_TERMINAL: \"Endpoint for the terminal link\",\nREACT_APP_WORKBENCHLINK_VNCDESKTOP: \"Endpoint for the VNC Desktop link\",\nREACT_APP_WORKBENCHLINK_VSCODE: \"Endpoint for the VS Code link\",\nREACT_APP_WORKBENCHLINK_JUPYTERLAB: \"Endpoint for the Jupyter Lab link\",\nREACT_APP_WORKBENCHLINK_JUPYTERNOTEBOOK:\n\"Endpoint for the Jupyter Notebook link\",\nREACT_APP_CLIENT_ID: 'AppID genereated by the gitlab OAuth provider',\nREACT_APP_AUTH_AUTHORITY: 'URL of the private gitlab instance',\nREACT_APP_REDIRECT_URI: 'URL of the homepage for the logged in users of the website',\nREACT_APP_LOGOUT_REDIRECT_URI: 'URL of the homepage for the anonymous users of the website',\nREACT_APP_GITLAB_SCOPES: 'OAuth scopes. These should match with the scopes set in gitlab OAuth provider',\n};\n// Example values with no base URL. Trailing and ending slashes are optional.\nwindow.env = {\nREACT_APP_ENVIRONMENT: 'prod',\nREACT_APP_URL: 'https://foo.com/',\nREACT_APP_URL_BASENAME: '',\nREACT_APP_URL_DTLINK: '/lab',\nREACT_APP_URL_LIBLINK: '',\nREACT_APP_WORKBENCHLINK_TERMINAL: '/terminals/main',\nREACT_APP_WORKBENCHLINK_VNCDESKTOP: '/tools/vnc/?password=vncpassword',\nREACT_APP_WORKBENCHLINK_VSCODE: '/tools/vscode/',\nREACT_APP_WORKBENCHLINK_JUPYTERLAB: '/lab',\nREACT_APP_WORKBENCHLINK_JUPYTERNOTEBOOK: '',\nREACT_APP_CLIENT_ID: '934b98f03f1b6f743832b2840bf7cccaed93c3bfe579093dd0942a433691ccc0',\nREACT_APP_AUTH_AUTHORITY: 'https://gitlab.foo.com/',\nREACT_APP_REDIRECT_URI: 'https://foo.com/Library',\nREACT_APP_LOGOUT_REDIRECT_URI: 'https://foo.com/',\nREACT_APP_GITLAB_SCOPES: 'openid profile read_user read_repository api',\n};\n// Example values with \"bar\" as basename URL.\n//Trailing and ending slashes are optional.\nwindow.env = {\nREACT_APP_ENVIRONMENT: \"dev\",\nREACT_APP_URL: 'https://foo.com/',\nREACT_APP_URL_BASENAME: 'bar',\nREACT_APP_URL_DTLINK: '/lab',\nREACT_APP_URL_LIBLINK: '',\nREACT_APP_WORKBENCHLINK_TERMINAL: '/terminals/main',\nREACT_APP_WORKBENCHLINK_VNCDESKTOP: '/tools/vnc/?password=vncpassword',\nREACT_APP_WORKBENCHLINK_VSCODE: '/tools/vscode/',\nREACT_APP_WORKBENCHLINK_JUPYTERLAB: '/lab',\nREACT_APP_WORKBENCHLINK_JUPYTERNOTEBOOK: '',\nREACT_APP_CLIENT_ID: '934b98f03f1b6f743832b2840bf7cccaed93c3bfe579093dd0942a433691ccc0',\nREACT_APP_AUTH_AUTHORITY: 'https://gitlab.foo.com/',\nREACT_APP_REDIRECT_URI: 'https://foo.com/bar/Library',\nREACT_APP_LOGOUT_REDIRECT_URI: 'https://foo.com/bar',\nREACT_APP_GITLAB_SCOPES: 'openid profile read_user read_repository api',\n};\n</code></pre> <ul> <li> <p>Copy the entire contents of the build folder to the root directory of your   server where you want to deploy the app. You can use FTP, SFTP, or any   other file transfer protocol to transfer the files.</p> </li> <li> <p>Make sure your server is configured to serve static files. This can vary   depending on the server technology you are using, but typically you will   need to configure your server to serve files from a specific directory.</p> </li> <li> <p>Once the files are on your server, you should be able to access your app   by visiting your server's IP address or domain name in a web browser.</p> </li> </ul> <p> The website depends on Traefik gateway and ML Workspace components to be available. Otherwise, you only get a skeleton non-functional website.</p>"},{"location":"admin/client/CLIENT.html#complementary-components","title":"Complementary Components","text":"<p>The website requires background services for providing actual functionality. The minimum background service required is atleast one ML Workspace serving the following routes.</p> <pre><code>https://foo.com/&lt;username&gt;/lab\nhttps://foo.com/&lt;username&gt;/terminals/main\nhttps://foo.com/&lt;username&gt;/tools/vnc/?password=vncpassword\nhttps://foo.com/&lt;username&gt;/tools/vscode/\n</code></pre> <p>The <code>username</code> is the user workspace created using ML Workspace docker container. Please follow the instructions in README. You can create as many user workspaces as you want. If you have two users - alice and bob - on your system, then the following the commands in  will instantiate the required user workspaces.</p> <pre><code>mkdir -p files/alice files/bob files/common\n\nprintf \"\\n\\n start the user workspaces\"\ndocker run -d \\\n-p 8090:8080 \\\n--name \"ml-workspace-alice\" \\\n-v \"$(pwd)/files/alice:/workspace\" \\\n-v \"$(pwd)/files/common:/workspace/common\" \\\n--env AUTHENTICATE_VIA_JUPYTER=\"\" \\\n--env WORKSPACE_BASE_URL=\"alice\" \\\n--shm-size 512m \\\n--restart always \\\nmltooling/ml-workspace:0.13.2\n\ndocker run -d \\\n-p 8091:8080 \\\n--name \"ml-workspace-bob\" \\\n-v \"$(pwd)/files/bob:/workspace\" \\\n-v \"$(pwd)/files/common:/workspace/common\" \\\n--env AUTHENTICATE_VIA_JUPYTER=\"\" \\\n--env WORKSPACE_BASE_URL=\"bob\" \\\n--shm-size 512m \\\n--restart always \\\nmltooling/ml-workspace:0.13.2\n</code></pre> <p>Given that multiple services are running at different routes, a reverse proxy is needed to map the background services to external routes. You can use Apache, NGINX, Traefik or any other software to work as reverse proxy.</p> <p>The website screenshots and usage information is available in user page.</p>"},{"location":"admin/client/auth.html","title":"Setting Up OAuth","text":"<p>To enable user authentication on DTaaS React client website, you will use the OAuth authentication protocol, specifically the PKCE authentication flow. Here are the steps to get started:</p> <p>1. Choose Your GitLab Server:</p> <ul> <li>You need to set up OAuth authentication on a GitLab server.   The commercial gitlab.com is not suitable for multi-user authentication   (DTaaS requires this), so you'll need an on-premise GitLab instance.</li> <li>You can use   GitLab Omnibus Docker for this purpose.</li> <li>Configure the OAuth application as   an instance-wide authentication type.</li> </ul> <p>2. Determine Your Website's Hostname:</p> <ul> <li>Before setting up OAuth on GitLab, decide on the hostname for your website.   It's recommended to use a self-hosted GitLab instance, which you will use in   other parts of the DTaaS application.</li> </ul> <p>3. Define Callback and Logout URLs:</p> <ul> <li>For the PKCE authentication flow to function correctly, you need two URLs:   a callback URL and a logout URL.</li> <li>The callback URL informs the OAuth provider of the page where   signed-in users should be redirected. It's different from the landing   homepage of the DTaaS application.</li> <li>The logout URL is where users will be directed after logging out.</li> </ul> <p>4. OAuth Application Creation:</p> <ul> <li>During the creation of the OAuth application on GitLab, you need to specify   the scope. Choose openid, profile, read_user, read_repository, and api scopes.</li> </ul> <p>5. Application ID:</p> <ul> <li>After successfully creating the OAuth application, GitLab generates   an application ID. This is a long string of HEX values that you will need for   your configuration files.</li> </ul> <p>6. Required Information from OAuth Application:</p> <ul> <li>You will need the following information from the OAuth application registered on GitLab:</li> </ul> GitLab Variable Name Variable Name in Client env.js Default Value OAuth Provider REACT_APP_AUTH_AUTHORITY https://gitlab.foo.com/ Application ID REACT_APP_CLIENT_ID Callback URL REACT_APP_REDIRECT_URI https://foo.com/Library Scopes REACT_APP_GITLAB_SCOPES openid, profile, read_user, read_repository, api"},{"location":"admin/client/auth.html#development-environment","title":"Development Environment","text":"<p>There needs to be a valid callback and logout URLs for development and testing purposes. You can use the same oauth application id for both development, testing and deployment scenarios. Only the callback and logout URLs change. It is possible to register multiple callback URLs in one oauth application. In order to use oauth for development and testing on developer computer (localhost), you need to add the following to oauth callback URL.</p> <pre><code>DTaaS application URL: http://localhost:4000\nCallback URL: http://localhost:4000/Library\nLogout URL: http://localhost:4000\n</code></pre> <p>The port 4000 is the default port for running the client website.</p>"},{"location":"admin/client/auth.html#multiple-dtaas-applications","title":"Multiple DTaaS applications","text":"<p>The DTaaS is a regular web application. It is possible to host multiple DTaaS applications on the same server. The only requirement is to have a distinct URLs. You can have three DTaaS applications running at the following URLs.</p> <pre><code>https://foo.com/au\nhttps://foo.com/acme\nhttps://foo.com/bar\n</code></pre> <p>All of these instances can use the same gitlab instance for authentication.</p> DTaaS application URL Gitlab Instance URL Callback URL Logout URL Application ID https://foo.com/au https://foo.gitlab.com https://foo.com/au/Library https://foo.com/au autogenerated by gitlab https://foo.com/acme https://foo.gitlab.com https://foo.com/au/Library https://foo.com/au autogenerated by gitlab https://foo.com/bar https://foo.gitlab.com https://foo.com/au/Library https://foo.com/au autogenerated by gitlab <p>If you are hosting multiple DTaaS instances on the same server, do not install DTaaS with a null basename on the same server. Even though it works well, the setup is confusing to setup and may lead to maintenance issues.</p> <p>If you choose to host your DTaaS application with a basename (say bar), then the URLs in <code>env.js</code> change to:</p> <pre><code>DTaaS application URL: https://foo.com/bar\nGitlab instance URL: https://foo.gitlab.com\nCallback URL: https://foo.com/bar/Library\nLogout URL: https://foo.com/bar\n</code></pre>"},{"location":"admin/servers/lib/LIB-MS.html","title":"Host Library Microservice","text":"<p>The lib microservice is a simplified file manager providing graphQL API. It has three features:</p> <ul> <li>provide a listing of directory contents.</li> <li>transfer a file to user.</li> <li>Source files can either come from local file system or from   a gitlab instance.</li> </ul> <p>The library microservice is designed to manage and serve files, functions, and models to users, allowing them to access and interact with various resources.</p> <p>This document provides instructions for running a stand alone library microservice.</p>"},{"location":"admin/servers/lib/LIB-MS.html#setup-the-file-system","title":"Setup the File System","text":"<p>The users expect the following file system structure for their reusable assets.</p> <p></p> <p>There is a skeleton file structure in DTaaS codebase. You can copy and create file system for your users.</p>"},{"location":"admin/servers/lib/LIB-MS.html#gitlab-setup-optional","title":"Gitlab setup (optional)","text":"<p>For this microserivce to be functional, a certain directory or gitlab project structure is expected. The microservice expects that the gitlab consisting of one group, DTaaS, and within that group, all of the projects be located, user1, user2, ... , as well as a commons project. Each project corresponds to files of one user. A sample file structure can be seen in gitlab dtaas group. You can visit the gitlab documentation on groups for help on the management of gitlab groups.</p> <p>You can clone the git repositories from the <code>dtaas</code> group to get a sample file system structure for the lib microservice.</p>"},{"location":"admin/servers/lib/LIB-MS.html#setup-microservice","title":"Setup Microservice","text":"<p>To set up the lib microservice, follow these steps:</p> <p>Download the lib-microservice.zip from the releases page.</p>"},{"location":"admin/servers/lib/LIB-MS.html#configuration-setup","title":"Configuration setup","text":"<p>The microservices uses <code>.env</code> environment files to receive configuration.</p> <p>To set up the environment variables for the lib microservice, create a new file named .env in the <code>lib-ms</code> directory. Then, add the following variables and their respective values. Below you can see and how, with included examples:</p> <pre><code>PORT='4001'\nMODE='local' or 'gitlab'\nLOCAL_PATH='/Users/&lt;Username&gt;/DTaaS/files'\nGITLAB_GROUP='dtaas'\nGITLAB_URL='https://gitlab.com/api/graphql'\nTOKEN='123-sample-token'\nLOG_LEVEL='debug'\nAPOLLO_PATH='/lib' or ''\nGRAPHQL_PLAYGROUND='false' or 'true'\n</code></pre> <p>The <code>LOCAL_PATH</code> variable is the absolute filepath to the location of the local directory which will be served to users by the Library microservice.</p> <p>The <code>GITLAB_URL</code>, <code>GITLAB_GROUP</code> and <code>TOKEN</code> are only relevant for <code>gitlab</code> mode. The <code>TOKEN</code> should be set to your GitLab Group access API token. For more information on how to create and use your access token, gitlab page.</p> <p>Once you've generated a token, copy it and replace the value of <code>TOKEN</code> with your token for the gitlab group, can be found.</p> <p>Replace the default values the appropriate values for your setup.</p> <p>NOTE:</p> <ol> <li>When _MODE=local, only LOCAL_PATH is used.    Other environment variables are unused.</li> <li>When MODE=gitlab, GITLAB_URL, TOKEN,    and GITLAB_GROUP are used; LOCAL_PATH is unused.</li> </ol>"},{"location":"admin/servers/lib/LIB-MS.html#config-flag","title":"Config flag","text":"<p>If the environment file is named something other than <code>.env</code>, the filename must be specifed with the command <code>-c, --config &lt;path&gt;</code>, when starting the application. For instance,</p> <pre><code>yarn start -c \".env.development\"\n</code></pre> <p>The <code>TOKEN</code> should be set to your GitLab Group access API token. For more information on how to create and use your access token, gitlab page.</p> <p>Once you've generated a token, copy it and replace the value of <code>TOKEN</code> with your token for the gitlab group, can be found.</p>"},{"location":"admin/servers/lib/LIB-MS.html#start-microservice","title":"Start Microservice","text":"<pre><code>yarn install    # Install dependencies for the microservice\nyarn build      # build the application\nyarn start      # start the application\n</code></pre> <p>You can press <code>Ctl+C</code> to halt the application. If you wish to run the microservice in the background, use</p> <pre><code>nohup yarn start &amp; disown\n</code></pre> <p>The lib microservice is now running and ready to serve files, functions, and models.</p> <p>Users can access the library microservice at URL: <code>http://localhost:&lt;PORT&gt;/lib</code>.</p>"},{"location":"admin/servers/lib/LIB-MS.html#service-endpoint","title":"Service Endpoint","text":"<p>The URL endpoint for this microservice is located at: <code>localhost:PORT/lib</code></p> <p>The service API documentation is available on user page.</p>"},{"location":"admin/vagrant/base-box.html","title":"DTaaS Vagrant Box","text":"<p>This README provides instructions on creating a custom Operating System virtual disk for running the DTaaS software. The virtual disk is managed by vagrant. The purpose is two fold:</p> <ul> <li>Provide cross-platform installation of the DTaaS application.   Any operating system supporting use of vagrant software utility   can support installation of the DTaaS software.</li> <li>Create a ready to use development environment for code contributors.</li> </ul> <p>There are two scripts in this directory:</p> Script name Purpose Default <code>user.sh</code> user installation <code>developer.sh</code> developer installation <p>If you are installing the DTaaS for developers, the default installation caters to your needs. You can skip the next step and continue with the creation of vagrant box.</p> <p>If you are a developer and would like additional software installed, you need to modify <code>Vagrantfile</code>. The existing <code>Vagrantfile</code> has two lines:</p> <pre><code>    config.vm.provision \"shell\", path: \"user.sh\"\n#config.vm.provision \"shell\", path: \"developer.sh\"\n</code></pre> <p>Uncomment the second line to have more software components installed. If you are not a developer, no changes are required to the <code>Vagrantfile</code>.</p> <p>This vagrant box installed for users will have the following items:</p> <ol> <li>docker v24.0</li> <li>nodejs v18.8</li> <li>yarn v1.22</li> <li>npm v10.2</li> <li>containers - ml-workspace v0.13, traefik v2.10, gitlab-ce v16.4,    influxdb v2.7, grafana v10.1, rabbitmq v3-management,    eclipse-mosquitto (mqtt) v2</li> </ol> <p>This vagrant box installed for developers will have the following items additional items:</p> <ul> <li>docker-compose v2.20</li> <li>microk8s v1.27</li> <li>jupyterlab</li> <li>mkdocs</li> <li>container - telegraf v1.28</li> </ul> <p>At the end of installation, the software stack created in vagrant box can be visualised as shown in the following figure.</p> <p></p> <p>The upcoming instructions will help with the creation of base vagrant box.</p> <pre><code>#create a key pair\nssh-keygen -b 4096 -t rsa -f key -q -N \"\"\nmv key vagrant\nmv key.pub vagrant.pub\n\nvagrant up\n\n# let the provisioning be complete\n# replace the vagrant ssh key-pair with personal one\nvagrant ssh\n\n# install the oh-my-zsh\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n# install plugins: history, autosuggestions,\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n# inside ~/.zshrc, modify the following line\nplugins=(git zsh-autosuggestions history cp tmux)\n# remove the vagrant default public key - first line of\n# /home/vagrant/.ssh/authorized_keys\n# exit vagrant guest machine and then\n# copy own private key to vagrant private key location\ncp vagrant .vagrant/machines/default/virtualbox/private_key\n\n# check\nvagrant ssh #should work\nvagrant halt\n\nvagrant package --base dtaas \\\n--info \"info.json\" --output dtaas.vagrant\n\n# Add box to the vagrant cache in ~/.vagrant.d/boxes directory\nvagrant box add --name dtaas ./dtaas.vagrant\n\n# You can use this box in other vagrant boxes using\n#config.vm.box = \"dtaas\"\n</code></pre>"},{"location":"admin/vagrant/base-box.html#references","title":"References","text":"<p>Image sources: Ubuntu logo</p>"},{"location":"admin/vagrant/single-machine.html","title":"DTaaS on Single Vagrant Machine","text":"<p>These are installation instructions for running DTaaS software inside one vagrant Virtual Machine. The setup requires a machine which can spare 16GB RAM, 8 vCPUs and 50GB Hard Disk space to the vagrant box.</p>"},{"location":"admin/vagrant/single-machine.html#create-base-vagrant-box","title":"Create Base Vagrant Box","text":"<p>Create dtaas Vagrant box. You would have created an SSH key pair - vagrant and vagrant.pub. The vagrant is the private SSH key and is needed for the next steps. Copy vagrant SSH private key into the current directory (<code>deploy/vagrant/single-machine</code>). This shall be useful for logging into the vagrant machines created for two-machine deployment.</p>"},{"location":"admin/vagrant/single-machine.html#target-installation-setup","title":"Target Installation Setup","text":"<p>The goal is to use the dtaas Vagrant box to install the DTaaS software on one single vagrant machine. A graphical illustration of a successful installation can be seen here.</p> <p></p> <p>There are many unused software packages/docker containers within the dtaas base box. The used packages/docker containers are highlighed in blue color.</p> <p>Tip</p> <p>The illustration shows hosting of gitlab on the same vagrant machine with http(s)://gitlab.foo.com The gitlab setup is outside the scope this installation guide. Please refer to gitlab docker install for gitlab installation.</p>"},{"location":"admin/vagrant/single-machine.html#configure-server-settings","title":"Configure Server Settings","text":"<p>A dummy foo.com URL has been used for illustration. Please change this to your unique website URL.</p> <p>Please follow the next steps to make this installation work in your local environment.</p> <p>Update the Vagrantfile. Fields to update are:</p> <ol> <li>Hostname (<code>node.vm.hostname = \"foo.com\"</code>)</li> <li>MAC address (<code>:mac =&gt; \"xxxxxxxx\"</code>).    This change is required if you have a DHCP server assigning domain names    based on MAC address. Otherwise, you can leave this field unchanged.</li> <li>Other adjustments are optional.</li> </ol>"},{"location":"admin/vagrant/single-machine.html#installation-steps","title":"Installation Steps","text":"<p>Execute the following commands from terminal</p> <pre><code>vagrant up\nvagrant ssh\n</code></pre> <p>Set a cronjob inside the vagrant virtual machine to remote the conflicting default route.</p> <pre><code>wget https://raw.githubusercontent.com/INTO-CPS-Association/DTaaS/release-v0.3/deploy/vagrant/route.sh\nsudo bash route.sh\n</code></pre> <p>If you only want to test the application and are not setting up a production instance, you can follow the instructions of single script install.</p> <p>If you are not in a hurry and would rather have a production instance, follow the instructions of regular server installation setup to complete the installation.</p>"},{"location":"admin/vagrant/single-machine.html#references","title":"References","text":"<p>Image sources: Ubuntu logo, Traefik logo, ml-workspace, nodejs, reactjs, nestjs</p>"},{"location":"admin/vagrant/two-machines.html","title":"DTaaS on Two Vagrant Machines","text":"<p>These are installation instructions for running DTaaS application in two vagrant virtual machines (VMs). In this setup, all the user workspaces shall be run on server1 while all the platform services will be run on server2.</p> <p>The setup requires two server VMs with the following hardware configuration:</p> <p>server1: 16GB RAM, 8 x64 vCPUs and 50GB Hard Disk space</p> <p>server2: 6GB RAM, 3 x64 vCPUs and 50GB Hard Disk space</p> <p>Under the default configuration, two user workspaces are provisioned on server1. The default installation setup also installs InfluxDB, Grafana, RabbitMQ and MQTT services on server2. If you would like to install more services, you can create shell scripts to install the same on server2.</p>"},{"location":"admin/vagrant/two-machines.html#create-base-vagrant-box","title":"Create Base Vagrant Box","text":"<p>Create dtaas Vagrant box. You would have created an SSH key pair - vagrant and vagrant.pub. The vagrant is the private SSH key and is needed for the next steps. Copy vagrant SSH private key into the current directory (<code>deploy/vagrant/two-machine</code>). This shall be useful for logging into the vagrant machines created for two-machine deployment.</p>"},{"location":"admin/vagrant/two-machines.html#target-installation-setup","title":"Target Installation Setup","text":"<p>The goal is to use this dtaas vagrant box to install the DTaaS software on server1 and the default platform services on server2. Both the servers are vagrant machines.</p> <p></p> <p>There are many unused software packages/docker containers within the dtaas base box. The used packages/docker containers are highlighed in blue and red color.</p> <p>A graphical illustration of a successful installation can be seen here.</p> <p></p> <p>In this case, both the vagrant boxes are spawed on one server using two vagrant configuration files, namely boxes.json and Vagrantfile.</p> <p>Tip</p> <p>The illustration shows hosting of gitlab on the same vagrant machine with http(s)://gitlab.foo.com The gitlab setup is outside the scope this installation guide. Please refer to gitlab docker install for gitlab installation.</p>"},{"location":"admin/vagrant/two-machines.html#configure-server-settings","title":"Configure Server Settings","text":"<p>NOTE: A dummy foo.com and services.foo.com  URLs has been used for illustration. Please change these to your unique website URLs.</p> <p>The first step is to define the network identity of the two VMs. For that, you need server name, hostname and MAC address. The hostname is the network URL at which the server can be accessed on the web. Please follow these steps to make this work in your local environment.</p> <p>Update the boxes.json. There are entries one for each server. The fields to update are:</p> <ol> <li><code>name</code> - name of server1 (<code>\"name\" = \"dtaas\"</code>)</li> <li><code>hostname</code> - hostname of server1 (<code>\"name\" = \"foo.com\"</code>)</li> <li>MAC address (<code>:mac =&gt; \"xxxxxxxx\"</code>).   This change is required if you have a DHCP server assigning domain names   based on MAC address. Otherwise, you can leave this field unchanged.</li> <li><code>name</code> - name of server2 (<code>\"name\" = \"services\"</code>)</li> <li><code>hostname</code> - hostname of server2 (<code>\"name\" = \"services.foo.com\"</code>)</li> <li>MAC address (<code>:mac =&gt; \"xxxxxxxx\"</code>).      This change is required if you have a DHCP server assigning domain      names based on MAC address. Otherwise, you can leave this field unchanged.</li> <li>Other adjustments are optional.</li> </ol>"},{"location":"admin/vagrant/two-machines.html#installation-steps","title":"Installation Steps","text":"<p>The installation instructions are given separately for each vagrant machine.</p>"},{"location":"admin/vagrant/two-machines.html#launch-dtaas-platform-default-services","title":"Launch DTaaS Platform Default Services","text":"<p>Follow the installation guide for services to install the DTaaS platform services.</p> <p>After the services are up and running, you can see the following services active within server2 (services.foo.com).</p> service external url InfluxDB and visualization service services.foo.com Grafana visualization service services.foo.com:3000 MQTT communication service services.foo.com:1883 RabbitMQ communication service services.foo.com:5672 RabbitMQ management service services.foo.com:15672"},{"location":"admin/vagrant/two-machines.html#install-dtaas-application","title":"Install DTaaS Application","text":"<p>Execute the following commands from terminal</p> <pre><code>vagrant up --provision dtaas\nvagrant ssh dtaas\nwget https://raw.githubusercontent.com/INTO-CPS-Association/DTaaS/release-v0.3/deploy/vagrant/route.sh\nsudo bash route.sh\n</code></pre> <p>If you only want to test the application and are not setting up a production instance, you can follow the instructions of single script install.</p> <p>If you are not in a hurry and would rather have a production instance, follow the instructions of regular server installation setup to complete the installation.</p>"},{"location":"admin/vagrant/two-machines.html#references","title":"References","text":"<p>Image sources: Ubuntu logo, Traefik logo, ml-workspace, nodejs, reactjs, nestjs</p>"},{"location":"developer/index.html","title":"Developers Guide","text":"<p>This guide is to help developers get familiar with the project. Please see developer-specific Slides, Video, and Research paper.</p>"},{"location":"developer/index.html#development-environment","title":"Development Environment","text":"<p>Ideally, developers should work on Ubuntu/Linux. Other operating systems are not supported inherently and may require additional steps.</p> <p>To start with, install the required software and git-hooks.</p> <pre><code>bash script/env.sh\nbash script/configure-git-hooks.sh\n</code></pre> <p>The git-hooks will ensure that your commits are formatted correctly and that the tests pass before you push the commits to remote repositories.</p> <p>Be aware that the tests may take a long time to run. If you want to skip the tests or formatting, you can use the <code>--no-verify</code> flag on <code>git commit</code> or <code>git push</code>. Please use this option with care.</p> <p>There is a script to download all the docker containers used in the project. You can download them using</p> <pre><code>bash script/docker.sh\n</code></pre> <p> The docker images are large and are likely to consume about 5GB of bandwidth and 15GB of space. You will have to download the docker images on a really good network.</p>"},{"location":"developer/index.html#development-workflow","title":"Development Workflow","text":"<p>To manage collaboration by multiple developers on the software, a development workflow is in place. Each developer should follow these steps:</p> <ol> <li>Fork of the main repository into your github account.</li> <li>Setup    Code Climate    and    Codecov    for your fork. The codecov does not require secret token    for public repositories.</li> <li>Install git-hooks for the project.</li> <li>Use    Fork, Branch, PR    workflow.</li> <li>Work in your fork and open a PR from your working    branch to your <code>feature/distributed-demo</code> branch.    The PR will run all the github actions, code climate and codecov checks.</li> <li>Resolve all the issues identified in the previous step.</li> <li>If you have access to the    integration server,    try your working branch on the integration server.</li> <li>Once changes are verified, a PR should be made to    the <code>feature/distributed-demo</code> branch of    the upstream    DTaaS repository.</li> <li>The PR will be merged after checks by either the    project administrators or the maintainers.</li> </ol> <p>Remember that every PR should be meaningful and satisfies a well-defined user story or improve the code quality.</p>"},{"location":"developer/index.html#code-quality","title":"Code Quality","text":"<p>The project code qualities are measured based on:</p> <ul> <li>Linting issues identified by   Code Climate</li> <li>Test coverage report collected by   Codecov</li> <li>Successful github actions</li> </ul>"},{"location":"developer/index.html#code-climate","title":"Code Climate","text":"<p>Code Climate performs static analysis, linting and style checks. Quality checks are performed by codeclimate are to ensure the best possible quality of code to add to our project.</p> <p>While any new issues introduced in your code would be shown in the PR page itself, to address any specific issue, you can visit the issues or code section of the codeclimate page.</p> <p>It is highly recommended that any code you add does not introduce new quality issues. If they are introduced, they should be fixed immediately using the appropriate suggestions from Code Climate, or in worst case, adding a ignore flag (To be used with caution).</p>"},{"location":"developer/index.html#codecov","title":"Codecov","text":"<p>Codecov keeps track of the test coverage for the entire project. For information about testing and workflow related to that, please see the testing page.</p>"},{"location":"developer/index.html#github-actions","title":"Github Actions","text":"<p>The project has multiple github actions defined. All PRs and direct code commits must have successful status on github actions.</p>"},{"location":"developer/npm-packages.html","title":"Publish NPM packages","text":"<p>The DTaaS software is developed as a monorepo with multiple npm packages. Since publishing to npmjs is irrevocable and public, developers are encouraged to setup their own private npm registry for local development.</p> <p>A private npm registry will help with local publish and unpublish steps.</p>"},{"location":"developer/npm-packages.html#setup-private-npm-registry","title":"Setup private npm registry","text":"<p>We recommend using verdaccio for this task. The following commands help you create a working private npm registry for development.</p> <pre><code>docker run -d --name verdaccio -p 4873:4873 verdaccio/verdaccio\nnpm adduser --registry http://localhost:4873 #create a user on the verdaccio registry\nnpm set registry http://localhost:4873/\nyarn config set registry \"http://localhost:4873\"\nyarn login --registry \"http://localhost:4873\" #login with the credentials for yarn utility\nnpm login #login with the credentials for npm utility\n</code></pre> <p>You can open <code>http://localhost:4873</code> in your browser, login with the user credentials to see the packages published.</p>"},{"location":"developer/npm-packages.html#publish-to-private-npm-registry","title":"Publish to private npm registry","text":"<p>To publish a package to your local registry, do:</p> <pre><code>yarn install\nyarn build #the dist/ directory is needed for publishing step\nyarn publish --no-git-tag-version #increments version in package.json, publishes to registry\nyarn publish #increments version in package.json, publishes to registry and adds a git tag\n</code></pre> <p>The package version in package.json gets updated as well. You can open <code>http://localhost:4873</code> in your browser, login with the user credentials to see the packages published. Please see verdaccio docs for more information.</p> <p>If there is a need to unpublish a package, ex: <code>@dtaas/runner@0.0.2</code>, do:</p> <pre><code>npm unpublish  --registry http://localhost:4873/ @dtaas/runner@0.0.2\n</code></pre> <p>To install / uninstall this utility for all users, do:</p> <pre><code>sudo npm install  --registry http://localhost:4873 -g @dtaas/runner\nsudo npm list -g # should list @dtaas/runner in the packages\nsudo npm remove --global @dtaas/runner\n</code></pre>"},{"location":"developer/npm-packages.html#use-the-packages","title":"Use the packages","text":"<p>The packages available in private npm registry can be used like the regular npm packages installed from npmjs.</p> <p>For example, to use <code>@dtaas/runner@0.0.2</code> package, do:</p> <pre><code>sudo npm install  --registry http://localhost:4873 -g @dtaas/runner\nrunner # launch the digital twin runner\n</code></pre>"},{"location":"developer/client/client.html","title":"React Website","text":"<p>The Website is how the end-users interact with the software platform. The website is being developed as a React single page web application.</p> <p>A dependency graph for the entire codebase of the react application is:</p>"},{"location":"developer/client/client.html#dependency-graphs","title":"Dependency Graphs","text":"<p>The figures are the dependency graphs generated from the code.</p>"},{"location":"developer/client/client.html#src-directory","title":"src directory","text":""},{"location":"developer/client/client.html#test-directory","title":"test directory","text":""},{"location":"developer/servers/lib/lib-ms.html","title":"Library Microservice","text":"<p>The Library Microservices - provides users with access to files in user workspaces via API. This microservice will interface with local file system and Gitlab to provide uniform Gitlab-compliant API access to files.</p> <p>Warning</p> <p>This microservice is still under heavy development. It is still not a good replacement for file server we are using now.</p>"},{"location":"developer/servers/lib/lib-ms.html#architecture-and-design","title":"Architecture and Design","text":"<p>The C4 level 2 diagram of this microservice is:</p> <p></p> <p>The GraphQL API provided by the library microservice shall be compliant with the Gitlab GraphQL service.</p>"},{"location":"developer/servers/lib/lib-ms.html#uml-diagrams","title":"UML Diagrams","text":""},{"location":"developer/servers/lib/lib-ms.html#class-diagram","title":"Class Diagram","text":"<pre><code>classDiagram\n    class FilesResolver {\n    -filesService: IFilesService\n    +listDirectory(path: string): Promise&lt;Project&gt;\n    +readFile(path: string): Promise&lt;Project&gt;\n    }\n\n    class FilesServiceFactory {\n    -configService: ConfigService\n    -gitlabFilesService: GitlabFilesService\n    -localFilesService: LocalFilesService\n    +create(): IFilesService\n    }\n\n    class GitlabFilesService {\n    -configService: ConfigService\n    -parseArguments(path: string): Promise&lt;domain: string; parsedPath: string&gt;\n    -sendRequest(query: string): Promise&lt;Project&gt;\n    -executeQuery(path: string, getQuery: QueryFunction): Promise&lt;Project&gt;\n    +listDirectory(path: string): Promise&lt;Project&gt;\n    +readFile(path: string): Promise&lt;Project&gt;\n    }\n\n    class LocalFilesService {\n    -configService: ConfigService\n    -getFileStats(fullPath: string, file: string): Promise&lt;Project&gt;\n    +listDirectory(path: string): Promise&lt;Project&gt;\n    +readFile(path: string): Promise&lt;Project&gt;\n    }\n\n    class ConfigService {\n    +get(propertyPath: string): any\n    }\n\n    class IFilesService{\n    listDirectory(path: string): Promise&lt;Project&gt;\n    readFile(path: string): Promise&lt;Project&gt;\n    }\n\n    IFilesService &lt;|-- FilesResolver: uses\n    IFilesService &lt;|.. GitlabFilesService: implements\n    IFilesService &lt;|.. LocalFilesService: implements\n    IFilesService &lt;|-- FilesServiceFactory: creates\n    ConfigService &lt;|-- FilesServiceFactory: uses\n    ConfigService &lt;|-- GitlabFilesService: uses\n    ConfigService &lt;|-- LocalFilesService: uses</code></pre>"},{"location":"developer/servers/lib/lib-ms.html#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    actor Client\n    actor Traefik\n\n    box LightGreen Library Microservice\n    participant FR as FilesResolver\n    participant FSF as FilesServiceFactory\n    participant CS as ConfigService\n    participant IFS as IFilesService\n    participant LFS as LocalFilesService\n    participant GFS as GitlabFilesService\n    end\n\n    participant FS as Local File System DB\n    participant GAPI as GitLab API DB\n\n    Client -&gt;&gt; Traefik : HTTP request\n    Traefik -&gt;&gt; FR : GraphQL query\n    activate FR\n\n    FR -&gt;&gt; FSF : create()\n    activate FSF\n\n    FSF -&gt;&gt; CS : getConfiguration(\"MODE\")\n    activate CS\n\n    CS --&gt;&gt; FSF : return configuration value\n    deactivate CS\n\n    alt MODE = Local\n    FSF -&gt;&gt; FR : return filesService (LFS)\n    deactivate FSF\n\n    FR -&gt;&gt; IFS : listDirectory(path) or readFile(path)\n    activate IFS\n\n    IFS -&gt;&gt; LFS : listDirectory(path) or readFile(path)\n    activate LFS\n\n    LFS -&gt;&gt; CS : getConfiguration(\"LOCAL_PATH\")\n    activate CS\n\n    CS --&gt;&gt; LFS : return local path\n    deactivate CS\n\n    LFS -&gt;&gt; FS : Access filesystem\n    alt Filesystem error\n        FS --&gt;&gt; LFS : Filesystem error\n        LFS -&gt;&gt; LFS : Throw new InternalServerErrorException\n        LFS --&gt;&gt; IFS : Error\n    else Successful file operation\n        FS --&gt;&gt; LFS : Return filesystem data\n        LFS -&gt;&gt; IFS : return Promise&lt;Project&gt;\n    end\n    deactivate LFS\n    else MODE = GitLab\n        FSF -&gt;&gt; FR : return filesService (GFS)\n        %%deactivate FSF\n\n    FR -&gt;&gt; IFS : listDirectory(path) or readFile(path)\n    activate IFS\n\n    IFS -&gt;&gt; GFS : listDirectory(path) or readFile(path)\n    activate GFS\n\n    GFS -&gt;&gt; GFS : parseArguments(path)\n    GFS -&gt;&gt; GFS : executeQuery()\n\n    GFS -&gt;&gt; CS : getConfiguration(\"GITLAB_API_URL\", \"GITLAB_TOKEN\")\n    activate CS\n\n    CS --&gt;&gt; GFS : return GitLab API URL and Token\n    deactivate CS\n\n    GFS -&gt;&gt; GAPI : sendRequest()\n    alt GitLab API error\n        GAPI --&gt;&gt; GFS : API error\n        GFS -&gt;&gt; GFS : Throw new Error(\"Invalid query\")\n        GFS --&gt;&gt; IFS : Error\n    else Successful GitLab API operation\n        GAPI --&gt;&gt; GFS : Return API response\n        GFS -&gt;&gt; IFS : return Promise&lt;Project&gt;\n    end\n    deactivate GFS\n    end\n\n    alt Error thrown\n    IFS -&gt;&gt; FR : return Error\n    deactivate IFS\n    FR -&gt;&gt; Traefik : return Error\n    Traefik -&gt;&gt; Client : HTTP error response\n    else Successful operation\n    IFS -&gt;&gt; FR : return Promise&lt;Project&gt;\n    deactivate IFS\n    FR -&gt;&gt; Traefik : return Promise&lt;Project&gt;\n    Traefik -&gt;&gt; Client : HTTP response\n    end\n\n    deactivate FR\n</code></pre>"},{"location":"developer/servers/lib/lib-ms.html#dependency-graphs","title":"Dependency Graphs","text":"<p>The figures are the dependency graphs generated from the code.</p>"},{"location":"developer/servers/lib/lib-ms.html#src-directory","title":"src directory","text":""},{"location":"developer/servers/lib/lib-ms.html#test-directory","title":"test directory","text":""},{"location":"developer/system/architecture.html","title":"System Overview","text":""},{"location":"developer/system/architecture.html#user-requirements","title":"User Requirements","text":"<p>The DTaaS software platform users expect a single platform to support the complete DT lifecycle. To be more precise, the platform users expect the following features:</p> <ol> <li>Author \u2013 create different assets of the DT on the    platform itself. This step requires use of some software    frameworks and tools whose sole purpose is to author    DT assets.</li> <li>Consolidate \u2013 consolidate the list of available DT assets    and authoring tools so that user can navigate the library    of reusable assets. This functionality requires support    for discovery of available assets.</li> <li>Configure \u2013 support selection and configuration of    DTs. This functionality also requires support for validation    of a given configuration.</li> <li>Execute \u2013 provision computing infrastructure on demand to    support execution of a DT.</li> <li>Explore \u2013 interact with a DT and explore the results    stored both inside and outside the platform. Exploration    may lead to analytical insights.</li> <li>Save \u2013 save the state of a DT that\u2019s already in the    execution phase. This functionality is required for on    demand saving and re-spawning of DTs.</li> <li>What-if analysis \u2013 explore alternative scenarios to (i)    plan for an optimal next step, (ii) recalibrate new DT    assets, (iii) automated creation of new DTs or their    assets; these newly created DT assets may be used to    perform scientifically valid experiments.</li> <li>Share \u2013 share a DT with other users of their organisation.</li> </ol>"},{"location":"developer/system/architecture.html#system-architecture","title":"System Architecture","text":"<p>The figure shows the system architecture of the the DTaaS software platform.</p> <p></p>"},{"location":"developer/system/architecture.html#system-components","title":"System Components","text":"<p>The users interact with the software platform using a website. The gateway is a single point of entry for direct access to the platform services. The gateway is responsible for controlling user access to the microservice components. The service mesh enables discovery of microservices, load balancing and authentication functionalities.</p> <p>In addition, there are microservices for catering to author, store, explore, configure, execute and scenario analysis requirements. The microservices are complementary and composable; they fulfil core requirements of the system.</p> <p>The microservices responsible for satisfying the user requirements are:</p> <ol> <li>The security microservice implements    role-based access control (RBAC) in the platform.</li> <li> <p>The accounting microservice is responsible for keeping track of the    platform, DT asset and infrastructure usage. Any licensing,    usage restrictions need to be enforced by the accounting    microservice. Accounting is a pre-requisite to commercialisation of    the platform.    Due to significant use of external    infrastructure and resources via the platform, the accounting    microservice needs to interface with accounting systems of    the external services.</p> </li> <li> <p>The data microservice is a frontend to all the databases    integrated into the platform. A time-series database and a    graph database are essential. These two databases store timeseries    data from PT, events on PT/DT, commands sent by    DT to PT. The PTs uses these databases even when their    respective DTs are not in the execute phase.</p> </li> <li>The visualisation microservice is again a frontend to    visualisation software that are natively supported inside the platform.    Any visualisation software running either on external    systems or on client browsers do not need to interact with    this microservice. They can directly use the data provided by    the data microservice.</li> </ol>"},{"location":"developer/system/architecture.html#c4-architectural-diagrams","title":"C4 Architectural Diagrams","text":"<p>The C4 architectural diagrams of the DTaaS software are presented here.</p>"},{"location":"developer/system/architecture.html#level-1","title":"Level 1","text":"<p>This Level 1 diagram only shows the users and the roles they play in the DTaaS software.</p> <p></p>"},{"location":"developer/system/architecture.html#level-2","title":"Level 2","text":"<p>This simplified version of Level 2 diagram shows the software containers of the DTaaS software.</p> <p></p> <p>If you are interested, please take a look at the detailed diagram.</p> <p>Please note that the given diagram only covers DT Lifecycle, Reusable Assets and Execution Manager.</p>"},{"location":"developer/system/architecture.html#mapping","title":"Mapping","text":"<p>A mapping of the C4 level 2 containers to components identified in the system architecture is also available in the table.</p> System Component Container(s) Gateway Traefik Gateway Unified Interface React Webapplication Reusable Assets Library Microservice Data MQTT, InfluxDB, and RabbitMQ (not shown in the C4 Level 2 diagram) Visualization InfluxDB (not shown in the C4 Level 2 diagram) DT Lifecycle DT Lifecycle Manager and DT Configuration Validator Security Gitlab OAuth Accounting None Execution Manager Execution Manager"},{"location":"developer/system/current-status.html","title":"Current Status","text":"<p>The DTaaS software platform is currently under development. Crucial system components are in place with ongoing development work focusing on increased automation and feature enhancement. The figure below shows the current status of the development work.</p> <p></p>"},{"location":"developer/system/current-status.html#user-security","title":"User Security","text":"<p>There is authentication mechanisms in place for the react website and the Traefik gateway.</p> <p>The react website component uses Gitlab for user authentication using OAuth protocol.</p>"},{"location":"developer/system/current-status.html#gateway-authentication","title":"Gateway Authentication","text":"<p>The Traefik gateway has HTTP basic authentication enabled by default. This authentication on top of HTTPS connection can provide a good protection against unauthorized use.</p> <p>Warning</p> <p>Please note that HTTP basic authentication over insecure non-TLS is insecure.</p> <p>There is also a possibility of using self-signed mTLS certificates. The current security functionality is based on signed Transport Layer Security (TLS) certificates issued to users. The TLS certificate based mutual TLS (mTLS) authentication protocol provides better security than the usual username and password combination. The mTLS authentication takes place between the users browser and the platform gateway. The gateway federates all the backend services. The service discovery, load balancing, and health checks are carried by the gateway based on a dynamic reconfiguration mechanism.</p> <p>Note</p> <p>The mTLS is not enabled in the default install. Please use the scripts in <code>ssl/</code> directory to generate the required certificates for users and Traefik gateway.</p>"},{"location":"developer/system/current-status.html#user-workspaces","title":"User Workspaces","text":"<p>All users have dedicated dockerized-workspaces. These docker-images are based on container images published by mltooling group.</p> <p>Thus DT experts can develop DTs from existing DT components and share them with other users. A file server has been setup to act as a DT asset repository. Each user gets space to store private DT assets and also gets access to shared DT assets. Users can synchronize their private DT assets with external git repositories. In addition, the asset repository transparently gets mapped to user workspaces within which users can perform DT lifecycle operations. There is also a library microservice which in the long-run will replace the file server.</p> <p>Users can run DTs in their workspaces and also permit remote access to other users. There is already shared access to internal and external services. With these two provisions, users can treat live DTs as service components in their own software systems.</p>"},{"location":"developer/system/current-status.html#platform-services","title":"Platform Services","text":"<p>There are four external services integrated with the DTaaS software platform. They are: InfluxDB, Grafana, RabbitMQ and MQTT.</p> <p>These services can be used by DTs and PTs for communication, storing and visualization of data. There can also be monitoring services setup based on these services.</p>"},{"location":"developer/system/current-status.html#development-priorities","title":"Development Priorities","text":"<p>The development priorities for the DTaaS software development team are:</p> <ul> <li>DT Runner   (API Interface to DT)</li> <li>Multi-user and microservice security</li> <li>Increased automation of installation procedures</li> <li>DT Configuration DSL \u00edn the form of YAML schema</li> <li>UI for DT creation</li> <li>DT examples</li> </ul> <p>Your contributions and collaboration are highly welcome.</p>"},{"location":"developer/testing/intro.html","title":"Testing","text":""},{"location":"developer/testing/intro.html#common-questions-on-testing","title":"Common Questions on Testing","text":""},{"location":"developer/testing/intro.html#what-is-software-testing","title":"What is Software Testing","text":"<p>Software testing is a procedure to investigate the quality of a software product in different scenarios. It can also be stated as the process of verifying and validating that a software program or application works as expected and meets the business and technical requirements that guided design and development.</p>"},{"location":"developer/testing/intro.html#why-software-testing","title":"Why Software Testing","text":"<p>Software testing is required to point out the defects and errors that were made during different development phases. Software testing also ensures that the product under test works as expected in all different cases \u2013 stronger the test suite, stronger is our confidence in the product that we have built. One important benefit of software testing is that it facilitates the developers to make incremental changes to source code and make sure that the current changes are not breaking the functionality of the previously existing code.</p>"},{"location":"developer/testing/intro.html#what-is-tdd","title":"What is TDD","text":"<p>TDD stands for Test Driven Development. It is a software development process that relies on the repetition of a very short development cycle: first the developer writes an (initially failing) automated test case that defines a desired improvement or new function, then produces the minimum amount of code to pass that test, and finally refactors the new code to acceptable standards. The goal of TDD can be viewed as specification and not validation. In other words, it\u2019s one way to think through your requirements or design before your write your functional code.</p>"},{"location":"developer/testing/intro.html#what-is-bdd","title":"What is BDD","text":"<p>BDD stands for \u201cBehaviour Driven Development\u201d. It is a software development process that emerged from TDD. It includes the practice of writing tests first, but focuses on tests which describe behavior, rather than tests which test a unit of implementation. This provides software development and management teams with shared tools and a shared process to collaborate on software development. BDD is largely facilitated through the use of a simple domain-specific language (DSL) using natural language constructs (e.g., English-like sentences) that can express the behavior and the expected outcomes. Mocha and Cucumber testing libraries are built around the concepts of BDD.</p>"},{"location":"developer/testing/intro.html#testing-workflow","title":"Testing workflow","text":"<p>(Ref: Ham Vocke, The Practical Test Pyramid)</p> <p>We follow a testing workflow in accordance with the test pyramid diagram given above, starting with isolated tests and moving towards complete integration for any new feature changes. The different types of tests (in the order that they should be performed) are explained below:</p>"},{"location":"developer/testing/intro.html#unit-tests","title":"Unit Tests","text":"<p>Unit testing is a level of software testing where individual units/ components of a software are tested. The objective of Unit Testing is to isolate a section of code and verify its correctness.</p> <p>Ideally, each test case is independent from the others. Substitutes such as method stubs, mock objects, and spies can be used to assist testing a module in isolation.</p>"},{"location":"developer/testing/intro.html#benefits-of-unit-testing","title":"Benefits of Unit Testing","text":"<ul> <li>Unit testing increases confidence in changing/ maintaining code.   If good unit tests are written and if they are run every time   any code is changed,   we will be able to promptly catch any defects introduced due   to the change.</li> <li>If codes are already made less interdependent to make unit   testing possible,   the unintended impact of changes to any code is less.</li> <li>The cost, in terms of time, effort and money, of fixing a   defect detected during   unit testing is lesser in comparison to that of defects   detected at higher levels.</li> </ul>"},{"location":"developer/testing/intro.html#unit-tests-in-dtaas","title":"Unit Tests in DTaaS","text":"<p>Each component DTaaS project uses unique technology stack. Thus the packages used for unit tests are different. Please check the <code>test/</code> directory of a component to figure out the unit test packages used.</p>"},{"location":"developer/testing/intro.html#integration-tests","title":"Integration tests","text":"<p>Integration testing is the phase in software testing in which individual software modules are combined and tested as a group. In DTaaS, we use an integration server for software development as well as such tests.</p> <p>The existing integration tests are done at the component level. There are no integration tests between the components. This task has been postponed to future.</p>"},{"location":"developer/testing/intro.html#end-to-end-tests","title":"End-to-End tests","text":"<p>Testing any code changes through the end user interface of your software is essential to verify if your code has the desired effect for the user. End-to-End tests in DTaaS a functional setup. For more information visit here.</p> <p>There are end-to-end tests in the DTaaS. This task has been postponed to future.</p>"},{"location":"developer/testing/intro.html#feature-tests","title":"Feature Tests","text":"<p>A Software feature can be defined as the changes made in the system to add new functionality or modify the existing functionality. Each feature is said to have a characteristics that is designed to be useful, intuitive and effective. It is important to test a new feature when it has been added. We also need to make sure that it does not break the functionality of already existing features. Hence feature tests prove to be useful.</p> <p>The DTaaS project does not have any feature tests yet. Cucumber shall be used in future to implement feature tests.</p>"},{"location":"developer/testing/intro.html#references","title":"References","text":"<p>Justin Searls and Kevin Buchanan, Contributing Tests wiki. This wiki has goog explanation of TDD and test doubles.</p>"},{"location":"user/features.html","title":"Overview","text":""},{"location":"user/features.html#advantages","title":"Advantages","text":"<p>The DTaaS software platform provides certain advantages to users:</p> <ul> <li>Support for different kinds of Digital Twins</li> <li>CFD, Simulink, co-simulation, FEM, ROM, ML etc.</li> <li>Integrates with other Digital Twin frameworks</li> <li>Facilitate availability of Digital Twin as a Service</li> <li>Collaboration and reuse</li> <li>Private workspaces for verification   of reusable assets, trial run DTs</li> <li>Cost effectiveness</li> </ul>"},{"location":"user/features.html#software-features","title":"Software Features","text":"<p>Each installation of DTaaS platform comes with the features highlighted in the following picture.</p> <p></p> <p>All the users have dedicated workspaces. These workspaces are dockerized versions of Linux Desktops. The user desktops are isolated so the installations and customizations done in one user workspace do not effect the other user workspaces.</p> <p>Each user workspace comes with some development tools pre-installed. These tools are directly accessible from web browser. The following tools are available at present:</p> Tool Advantage Jupyter Lab Provides flexible creation and use of digital twins and their components from web browser. All the native Jupyterlab usecases are supported here. Jupyter Notebook Useful for web-based management of their files (library assets) VS Code in the browser A popular IDE for software development. Users can develop their digital twin-related assets here. ungit An interactive git client. Users can work with git repositories from web browser <p>In addition, users have access to xfce-based remote desktop via VNC client. The VNC client is available right in the web browser. The xfce supported desktop software can also be run in their workspace.</p> <p>The DTaaS software platform has some pre-installed services available. The currently available services are:</p> Service Advantage InfluxDB Time-series database primarly for storing time-series data from physical twins. The digital twins can use an already existing data. Users can also create visualization dashboards for their digital twins. RabbitMQ Communication broker for communication between physical and digital twins Grafana Visualization dashboards for their digital twins. MQTT Lightweight data transfer broker for IoT devices / physical twins feeding data into digital twins. <p>In addition, the workspaces are connected to the Internet so all the Digital Twins running in the workspace can interact with both the internal and external services.</p> <p>The users can publish and reuse the digital twin assets available on the platform. In addition, users can run their digital twins and make these live digital twins available as services to their clients. The clients need not be users of the DTaaS software installation.</p>"},{"location":"user/motivation.html","title":"Motivation","text":"<p>How can DT software platforms enable users collaborate to:</p> <ul> <li>Build digital twins (DTs)</li> <li>Use DTs themselves</li> <li>Share DTs with other users</li> <li>Provide the existing DTs as Service to other users</li> </ul> <p>In addition, how can the DT software platforms:</p> <ul> <li>Support DT lifecycle</li> <li>Scale up rather than scale down (flexible convention over configuration)</li> </ul>"},{"location":"user/motivation.html#existing-approaches","title":"Existing Approaches","text":"<p>There are quite a few solutions proposed in the recent past to solve this problem. Some of them are:</p> <ul> <li>Focus on data from Physical Twins (PTs) to   perform analysis, diagnosis, planning etc\u2026</li> <li>Share DT assets across the upstream, downstream etc\u2026.</li> <li>Evaluate different models of PT</li> <li>DevOps for Cyber Physical Systems (CPS)</li> <li>Scale DT / execution of DT / ensemble of related DTs</li> <li>Support for PT product lifecycle</li> </ul>"},{"location":"user/motivation.html#our-approach","title":"Our Approach","text":"<ul> <li>Support for transition from existing workflows to DT frameworks</li> <li>Create DTs from reusable assets</li> <li>Enable users to share DT assets</li> <li>Offer DTs as a Service</li> <li>Integrate the DTs with external software systems</li> <li>Separate configurations of independent DT components</li> </ul>"},{"location":"user/digital-twins/create.html","title":"Create a Digital Twin","text":"<p>The first step in digital twin creation is to use the available assets in your workspace. If you have assets / files in your computer that need to be available in the DTaaS workspace, then please follow the instructions provided in library assets.</p> <p>There are dependencies among the library assets. These dependencies are shown below.</p> <p></p> <p>A digital twin can only be created by linking the assets in a meaningful way. This relationship can be expressed using a mathematical equation:</p> <p> </p> <p>where D denotes data, M denotes models, F denotes functions, T denotes tools,  denotes DT configuration and  is a symbolic notation for a digital twin itself. The   expression denotes composition of DT from D,M,T and F assets. The  indicates zero or one more instances of an asset and  indicates one or more instances of an asset.</p> <p>The DT configuration specifies the relevant assets to use, the potential parameters to be set for these assets. If a DT needs to use RabbitMQ, InfluxDB like services supported by the platform, the DT configuration needs to have access credentials for these services.</p> <p>This kind of generic DT definition is based on the DT examples seen in the wild. You are at liberty to deviate from this definition of DT. The only requirement is the ability to run the DT from either commandline or desktop.</p> <p>Tip</p> <p>If you are stepping into the world of Digital Twins, you might not have distinct digital twin assets. You are likely to have one directory of everything in which you run your digital twin. In such a case we recommend that you upload this monolithic digital twin into digital_twin/your_digital_twin_name directory.</p>"},{"location":"user/digital-twins/create.html#example","title":"Example","text":"<p>The Examples repository contains a co-simulation setup for mass spring damper. This example illustrates the potential of using co-simulation for digital twins.</p> <p>The file system contents for this example are:</p> <pre><code>workspace/\n  data/\n    mass-spring-damper\n        input/\n        output/\n\n  digital_twins/\n    mass-spring-damper/\n      cosim.json\n      time.json\n      lifecycle/\n        analyze\n        clean\n        evolve\n        execute\n        save\n        terminate\n      README.md\n\n  functions/\n  models/\n    MassSpringDamper1.fmu\n    MassSpringDamper2.fmu\n\n  tools/\n  common/\n    data/\n    functions/\n    models/\n    tools/\n        maestro-2.3.0-jar-with-dependencies.jar\n</code></pre> <p>The <code>workspace/data/mass-spring-damper/</code> contains <code>input</code> and <code>output</code> data for the mass-spring-damper digital twin.</p> <p>The two FMU models needed for this digital twin are in <code>models/</code> directory.</p> <p>The co-simulation digital twin needs Maestro co-simulation orchestrator. Since this is a reusable asset for all the co-simulation based DTs, the tool has been placed in <code>common/tools/</code> directory.</p> <p>The actual digital twin configuration is specified in <code>digital twins/mass-spring-damper</code> directory. The co-simulation configuration is specified in two json files, namely <code>cosim.json</code> and <code>time.json</code>. A small explanation of digital twin for its users can be placed in <code>digital twins/mass-spring-damper/README.md</code>.</p> <p>The launch program for this digital twin is in <code>digital twins/mass-spring-damper/lifecycle/execute</code>. This launch program runs the co-simulation digital twin. The co-simulation runs till completion and then ends. The programs in <code>digital twins/mass-spring-damper/lifecycle</code> are responsible for lifecycle management of this digital twin. The lifecycle page provides more explanation on these programs.</p> <p>Execution of a Digital Twin</p> <p>A frequent question arises on the run time characteristics of a digital twin. The natural intuition is to say that a digital twin must operate as long as its physical twin is in operation. If a digital twin runs for a finite time and then ends, can it be called a digital twin? The answer is a resounding YES. The Industry 4.0 usecases seen among SMEs have digital twins that run for a finite time. These digital twins are often run at the discretion of the user.</p> <p>You can run this digital twin by,</p> <ol> <li>Go to Workbench tools page of the DTaaS website and open VNC Desktop.    This opens a new tab in your browser</li> <li>A page with VNC Desktop and a connect button comes up. Click on Connect.    You are now connected to the Linux Desktop of your workspace.</li> <li>Open a Terminal (black rectangular icon in the top left region of your tab)    and type the following commands.</li> <li> <p>Download the example files by following the instructions given on    examples overview.</p> </li> <li> <p>Go to the digital twin directory and run</p> </li> </ol> <pre><code>cd /workspace/examples/digital_twins/mass-spring-damper\nlifecycle/execute\n</code></pre> <p>The last command executes the mass-spring-damper digital twin and stores    the co-simulation output in <code>data/mass-spring-damper/output</code>.</p>"},{"location":"user/digital-twins/lifecycle.html","title":"Digital Twin Lifecycle","text":"<p>The physical products in the real world have product lifecycle. A simplified four-stage product life is illustrated here.</p> <p>A digital twin tracking the physical products (twins) need to track and evolve in conjunction with the corresponding physical twin.</p> <p>The possible activities undertaken in each lifecycle phases are illustrated in the figure.</p> <p></p> <p>(Ref: Minerva, R, Lee, GM and Crespi, N (2020) Digital Twin in the IoT context: a survey on technical features, scenarios and architectural models. Proceedings of the IEEE, 108 (10). pp. 1785-1824. ISSN 0018-9219.)</p>"},{"location":"user/digital-twins/lifecycle.html#lifecycle-phases","title":"Lifecycle Phases","text":"<p>The four phase lifecycle has been extended to a lifecycle with eight phases. The new phase names and the typical activities undertaken in each phase are outlined in this section.</p> <p>A DT lifecycle consists of explore, create, execute, save, analyse, evolve  and terminate phases.</p> Phase Main Activities explore selection of suitable assets based on the user needs and checking their compatibility for the purposes of creating a DT. create specification of DT configuration. If DT already exists, there is no creation phase at the time of reuse. execute automated / manual execution of a DT based on its configuration. The DT configuration must checked before starting the execution phase. analyse checking the outputs of a DT and making a decision. The outputs can be text files, or visual dashboards. evolve reconfigure DT primarily based on analysis. save involves saving the state of DT to enable future recovery. terminate stop the execution of DT. <p>A digital twin faithfully tracking the physical twin lifecycle will have to support all the phases. It is also possible for digital twin engineers to add more phases to digital they are developing. Thus it is important for the DTaaS software platform needs to accommodate needs of different DTs.</p> <p>A potential linear representation of the tasks undertaken in a digital twin lifecycle are shown here.</p> <p></p> <p>Again this is only a one possible pathway. Users are at liberty to alter the sequence of steps.</p> <p>It is possible to map the lifecycle phases identified so far with the  Build-Use-Share approach of the DTaaS software platform.</p> <p></p> <p>Even though not mandatory, having a matching coding structure makes it easy to for users to create and manage their DTs within the DTaaS. It is recommended to have the following structure:</p> <pre><code>workspace/\n  digital_twins/\n    digital-twin-1/\n      lifecycle/\n        analyze\n        clean\n        evolve\n        execute\n        save\n        terminate\n</code></pre> <p>A dedicated program exists for each phase of DT lifecycle. Each program can be as simple as a script that launches other programs or sends messages to a live digital twin.</p>"},{"location":"user/digital-twins/lifecycle.html#example-lifecycle-scripts","title":"Example Lifecycle Scripts","text":"<p>Here are the example programs / scripts to manage three phases in the lifecycle of mass-spring-damper DT.</p> lifecycle/execute<pre><code>#!/bin/bash\nmkdir -p /workspace/data/mass-spring-damper/output\n#cd ..\njava -jar /workspace/common/tools/maestro-2.3.0-jar-with-dependencies.jar \\\nimport -output /workspace/data/mass-spring-damper/output \\\n--dump-intermediate sg1 cosim.json time.json -i -vi FMI2 \\\noutput-dir&gt;debug.log 2&gt;&amp;1\n</code></pre> <p>The execute phases uses the DT configuration, FMU models and Maestro tool to execute the digital twin. The script also stores the output of cosimulation in <code>/workspace/data/mass-spring-damper/output</code>.</p> <p>It is possible for a DT not to support a specific lifecycle phase. This intention can be specified with an empty script and a helpful message if deemed necessary.</p> lifecycle/analyze<pre><code>#!/bin/bash\nprintf \"operation is not supported on this digital twin\"\n</code></pre> <p>The lifecycle programs can call other programs in the code base. In the case of <code>lifecycle/terminate</code> program, it is calling another script to do the necessary job.</p> lifecycle/terminate<pre><code>#!/bin/bash\nlifecycle/clean\n</code></pre>"},{"location":"user/examples/index.html","title":"DTaaS Examples","text":"<p>There are some example digital twins created for the DTaaS software. Use these examples and follow the steps given in the Examples section to experience features of the DTaaS software platform and understand best practices for managing digital twins within the platform.</p>"},{"location":"user/examples/index.html#copy-examples","title":"Copy Examples","text":"<p>The first step is to copy all the example code into your user workspace within the DTaaS. Use the given shell script to copy all the examples into <code>/workspace/examples</code> directory.</p> <pre><code>wget https://raw.githubusercontent.com/INTO-CPS-Association/DTaaS-examples/main/getExamples.sh\nbash getExamples.sh\n</code></pre>"},{"location":"user/examples/index.html#example-list","title":"Example List","text":"<p>The digital twins provided in examples vary in their complexity. It is best to use the examples in the following order.</p> <ol> <li>Mass Spring Damper</li> <li>Water Tank Fault Injection</li> <li>Water Tank Model Swap</li> </ol> <p> DTaaS examples</p>"},{"location":"user/examples/incubator/index.html","title":"Incubator Demo","text":"<p>Installation of required python packages for the Incubator demo</p> <pre><code>pip install pyhocon\npip install influxdb_client\npip install scipy\npip install pandas\npip install pika\npip install oomodelling\npip install control\npip install filterpy\npip install sympy\npip install docker\n</code></pre> <p>start rabbitmq server and create a rabbitmq account with,</p> <pre><code>name: incubator\npassword:incubator\nwith access to the virtual host \"/\"\n</code></pre> <pre><code>docker run -d --name rabbitmq-server -p 15672:15672 -p 5672:5672 rabbitmq:3-management\ndocker exec rabbitmq-server rabbitmqctl add_user incubator incubator\ndocker exec rabbitmq-server rabbitmqctl set_permissions -p \"/\" incubator \".*\" \".*\" \".*\"\n</code></pre> <p>Access InfluxDB running on another machine. Remember that InfluxDB works only on a distinct sub-domain name like <code>influx.foo.com</code>, but not on <code>foo.com/influx</code>.</p> <pre><code>ssh -i /vagrant/vagrant -fNT -L 40000:localhost:80 vagrant@influx.server2.com\n</code></pre> <p>Update the rabbitmq-server and influxdb configuration in</p> <pre><code>/home/vagrant/dt/1/incubator/example_digital-twin_incubator/software/startup.conf\n</code></pre> <p>select (comment / uncomment) functions in</p> <pre><code>/home/vagrant/dt/1/incubator/example_digital-twin_incubator/software/startup/start_all_services.py\n</code></pre> <p>Start the program</p> <pre><code>export PYTHONPATH=\"${PYTHONPATH}:/home/vagrant/dt/1/incubator/example_digital-twin_incubator/software/incubator\"\ncd /home/vagrant/dt/1/incubator/example_digital-twin_incubator/software\npython3 -m startup.start_all_services\n</code></pre>"},{"location":"user/examples/mass-spring-damper/index.html","title":"Mass Spring Damper","text":""},{"location":"user/examples/mass-spring-damper/index.html#overview","title":"Overview","text":"<p>The mass spring damper digital twin (DT) comprises two mass spring dampers and demonstrates how a co-simulation based DT can be used within DTaaS.</p>"},{"location":"user/examples/mass-spring-damper/index.html#example-diagram","title":"Example Diagram","text":""},{"location":"user/examples/mass-spring-damper/index.html#example-structure","title":"Example Structure","text":"<p>There are two simulators included in the study, each representing a mass spring damper system. The first simulator calculates the mass displacement and speed of  for a given force  acting on mass . The second simulator calculates force  given a displacement and speed of mass . By coupling these simulators, the evolution of the position of the two masses is computed.</p> <p></p>"},{"location":"user/examples/mass-spring-damper/index.html#configuration-of-assets","title":"Configuration of assets","text":"<p>This example uses two models and one tool. The specific assets used are:</p> Asset Type Names of Assets Visibility Reuse in Other Examples Models MassSpringDamper1.fmu Private Yes MassSpringDamper2.fmu Private Yes Tool maestro-2.3.0-jar-with-dependencies.jar Common Yes <p>The <code>co-sim.json</code> and <code>time.json</code> are two DT configuration files used for executing the digital twin.</p>"},{"location":"user/examples/mass-spring-damper/index.html#lifecycle-phases","title":"Lifecycle Phases","text":"Lifecycle Phase Completed Tasks Create Installs Java Development Kit for Maestro tool Execute Produces and stores output in data/mass-spring-damper/output directory Clean Clears run logs and outputs"},{"location":"user/examples/mass-spring-damper/index.html#run-the-example","title":"Run the example","text":"<p>To run the example, change your present directory.</p> <pre><code>cd workspace/examples/digital_twins/mass-spring-damper\n</code></pre> <p>If required, change the execute permission of lifecycle scripts you need to execute, for example:</p> <pre><code>chmod +x lifecycle/create\n</code></pre> <p>Now, run the following scripts:</p>"},{"location":"user/examples/mass-spring-damper/index.html#create","title":"Create","text":"<p>Installs Open Java Development Kit 17 in the workspace.</p> <pre><code>lifecycle/create\n</code></pre>"},{"location":"user/examples/mass-spring-damper/index.html#execute","title":"Execute","text":"<p>Run the co-simulation. Generate the co-simulation output.csv file at <code>data/mass-spring-damper/output/output.csv</code>.</p> <p>There are also debug and maestro log files stored in <code>data/mass-spring-damper/output</code> directory.</p> <pre><code>lifecycle/execute\n</code></pre>"},{"location":"user/examples/mass-spring-damper/index.html#examine-the-results","title":"Examine the results","text":"<p>The results can be found in the workspace/examples/data/mass-spring-damper/output directory.</p> <p>You can also view run logs in the workspace/examples/digital_twins/mass-spring-damper.</p>"},{"location":"user/examples/mass-spring-damper/index.html#terminate-phase","title":"Terminate phase","text":"<p>Terminate to clean up the debug files and co-simulation output files.</p> <pre><code>lifecycle/terminate\n</code></pre>"},{"location":"user/examples/mass-spring-damper/index.html#references","title":"References","text":"<p>More information about co-simulation techniques and mass spring damper case study are available in:</p> <pre><code>Gomes, Cl\u00e1udio, et al. \"Co-simulation: State of the art.\"\narXiv preprint arXiv:1702.00686 (2017).\n</code></pre>"},{"location":"user/examples/water_tank_FI/index.html","title":"Water Tank Fault Injection","text":""},{"location":"user/examples/water_tank_FI/index.html#overview","title":"Overview","text":"<p>This example shows a fault injection (FI) enabled digital twin (DT). A live DT is subjected to simulated faults received from the environment. The simulated faults is specified as part of DT configuration and can be changed for new instances of DTs.</p> <p>In this co-simulation based DT, a watertank case-study is used; co-simulation consists of a tank and controller. The goal of which is to keep the level of water in the tank between <code>Level-1</code> and <code>Level-2</code>. The faults are injected into output of the water tank controller (Watertankcontroller-c.fmu) from 12 to 20 time units, such that the tank output is closed for a period of time, leading to the water level increasing in the tank beyond the desired level (<code>Level-2</code>).</p>"},{"location":"user/examples/water_tank_FI/index.html#example-diagram","title":"Example Diagram","text":""},{"location":"user/examples/water_tank_FI/index.html#example-structure","title":"Example Structure","text":""},{"location":"user/examples/water_tank_FI/index.html#configuration-of-assets","title":"Configuration of assets","text":"<p>This example uses two models and one tool. The specific assets used are:</p> Asset Type Names of Assets Visibility Reuse in Other Examples Models watertankcontroller-c.fmu Private Yes singlewatertank-20sim.fmu Private Yes Tool maestro-2.3.0-jar-with-dependencies.jar Common Yes <p>The <code>multimodelFI.json</code> and <code>simulation-config.json</code> are two DT configuration files used for executing the digital twin.</p> <p> The faults are defined in wt_fault.xml.</p>"},{"location":"user/examples/water_tank_FI/index.html#lifecycle-phases","title":"Lifecycle Phases","text":"Lifecycle Phase Completed Tasks Create Installs Java Development Kit for Maestro tool Execute Produces and stores output in data/water_tank_FI/output directory Clean Clears run logs and outputs"},{"location":"user/examples/water_tank_FI/index.html#run-the-example","title":"Run the example","text":"<p>To run the example, change your present directory.</p> <pre><code>cd workspace/examples/digital_twins/water_tank_FI\n</code></pre> <p>If required, change the execute permission of lifecycle scripts you need to execute, for example:</p> <pre><code>chmod +x lifecycle/create\n</code></pre> <p>Now, run the following scripts:</p>"},{"location":"user/examples/water_tank_FI/index.html#create","title":"Create","text":"<p>Installs Open Java Development Kit 17 and pip dependencies. The pandas and matplotlib are the pip dependencies installated.</p> <pre><code>lifecycle/create\n</code></pre>"},{"location":"user/examples/water_tank_FI/index.html#execute","title":"Execute","text":"<p>Run the co-simulation. Generates the co-simulation output.csv file at <code>/workspace/examples/data/water_tank_FI/output</code>.</p> <pre><code>lifecycle/execute\n</code></pre>"},{"location":"user/examples/water_tank_FI/index.html#analyze-phase","title":"Analyze phase","text":"<p>Process the output of co-simulation to produce a plot at: <code>/workspace/examples/data/water_tank_FI/output/plots/</code>.</p> <pre><code>lifecycle/analyze\n</code></pre>"},{"location":"user/examples/water_tank_FI/index.html#examine-the-results","title":"Examine the results","text":"<p>The results can be found in the workspace/examples/data/water_tank_FI/output directory.</p> <p>You can also view run logs in the workspace/examples/digital_twins/water_tank_FI.</p>"},{"location":"user/examples/water_tank_FI/index.html#terminate-phase","title":"Terminate phase","text":"<p>Clean up the temporary files and delete output plot</p> <pre><code>lifecycle/terminate\n</code></pre>"},{"location":"user/examples/water_tank_FI/index.html#references","title":"References","text":"<p>More details on this case-study can be found in the paper:</p> <pre><code>M. Frasheri, C. Thule, H. D. Macedo, K. Lausdahl, P. G. Larsen and\nL. Esterle, \"Fault Injecting Co-simulations for Safety,\"\n2021 5th International Conference on System Reliability and Safety (ICSRS),\nPalermo, Italy, 2021.\n</code></pre>"},{"location":"user/examples/water_tank_swap/index.html","title":"Water Tank Model Swap","text":""},{"location":"user/examples/water_tank_swap/index.html#overview","title":"Overview","text":"<p>This example shows multi-stage execution and dynamic reconfiguration of a digital twin (DT). Two features of DTs are demonstrated here:</p> <ul> <li>Fault injection into live DT</li> <li>Dynamic auto-reconfiguration of live DT</li> </ul> <p>The co-simulation methodology is used to construct this DT.</p>"},{"location":"user/examples/water_tank_swap/index.html#example-structure","title":"Example Structure","text":""},{"location":"user/examples/water_tank_swap/index.html#configuration-of-assets","title":"Configuration of assets","text":"<p>This example uses four models and one tool. The specific assets used are:</p> Asset Type Names of Assets Visibility Reuse in Other Examples Models Watertankcontroller-c.fmu Private Yes Singlewatertank-20sim.fmu Private Yes Leak_detector.fmu Private No Leak_controller.fmu Private No Tool maestro-2.3.0-jar-with-dependencies.jar Common Yes <p>This DT has many configuration files. The DT is executed in two stages. There exist separate DT configuration files for each stage. The following table shows the configuration files and their purpose.</p> Configuration file name Execution Stage Purpose mm1. json stage-1 DT configuration wt_fault.xml, FaultInject.mabl stage-1 faults injected into DT during stage-1 mm2.json stage-2 DT configuration simulation-config.json Both stages Configuration for specifying DT execution time and output logs"},{"location":"user/examples/water_tank_swap/index.html#lifecycle-phases","title":"Lifecycle Phases","text":"Lifecycle Phase Completed Tasks Create Installs Java Development Kit for Maestro tool Execute Produces and stores output in data/water_tank_swap/output directory Analyze Process the co-simulation output and produce plots Clean Clears run logs, outputs and plots"},{"location":"user/examples/water_tank_swap/index.html#run-the-example","title":"Run the example","text":"<p>To run the example, change your present directory.</p> <pre><code>cd workspace/examples/digital_twins/water_tank_swap\n</code></pre> <p>If required, change the permission of files you need to execute, for example:</p> <pre><code>chmod +x lifecycle/create\n</code></pre> <p>Now, run the following scripts:</p>"},{"location":"user/examples/water_tank_swap/index.html#create","title":"Create","text":"<p>Installs Open Java Development Kit 17 and pip dependencies. The matplotlib pip package is also installated.</p> <pre><code>lifecycle/create\n</code></pre>"},{"location":"user/examples/water_tank_swap/index.html#execute","title":"Execute","text":"<p>This DT has two-stage execution. In the first-stage, a co-simulation is executed. The Watertankcontroller-c.fmu and Singlewatertank-20sim.fmu models are used to execute the DT. During this stage, faults are injected into one of the models (Watertankcontroller-c.fmu) and the system performance is checked.</p> <p>In the second-stage, another co-simulation is run in which three FMUs are used. The FMUs used are: watertankcontroller, singlewatertank-20sim, and leak_detector. There is an in-built monitor in the Maestro tool. This monitor is enabled during the stage and a swap condition is set at the beginning of the second-stage. When the swap condition is satisfied, the Maestro swaps out Watertankcontroller-c.fmu model and swaps in Leakcontroller.fmu model. This swapping of FMU models demonstrates the dynamic reconfiguration of a DT.</p> <p>The end of execution phase generates the co-simulation output.csv file at <code>/workspace/examples/data/water_tank_swap/output</code>.</p> <pre><code>lifecycle/execute\n</code></pre>"},{"location":"user/examples/water_tank_swap/index.html#analyze-phase","title":"Analyze phase","text":"<p>Process the output of co-simulation to produce a plot at: <code>/workspace/examples/data/water_tank_FI/output/plots/</code>.</p> <pre><code>lifecycle/analyze\n</code></pre>"},{"location":"user/examples/water_tank_swap/index.html#examine-the-results","title":"Examine the results","text":"<p>The results can be found in the workspace/examples/data/water_tank_swap/output directory.</p> <p>You can also view run logs in the workspace/examples/digital_twins/water_tank_swap.</p>"},{"location":"user/examples/water_tank_swap/index.html#terminate-phase","title":"Terminate phase","text":"<p>Clean up the temporary files and delete output plot</p> <pre><code>lifecycle/terminate\n</code></pre>"},{"location":"user/examples/water_tank_swap/index.html#references","title":"References","text":"<p>The runtime model (FMU) swap mechanism demonstrated by the experiment is detailed in the paper:</p> <pre><code>Ejersbo, Henrik, et al. \"fmiSwap: Run-time Swapping of Models for\nCo-simulation and Digital Twins.\" arXiv preprint arXiv:2304.07328 (2023).\n</code></pre> <p>The runtime reconfiguration of co-simulation by modifying the Functional Mockup Units (FMUs) used is further detailed in the paper:</p> <pre><code>Ejersbo, Henrik, et al. \"Dynamic Runtime Integration of\nNew Models in Digital Twins.\" 2023 IEEE/ACM 18th Symposium on\nSoftware Engineering for Adaptive and Self-Managing Systems\n(SEAMS). IEEE, 2023.\n</code></pre>"},{"location":"user/servers/lib/LIB-MS.html","title":"Library Microservice","text":"<p> The library microservice provides an API interface to reusable assets library. This is only for expert users who need to integrate the DTaaS with their own IT systems. Regular users can safely skip this page.</p> <p>The lib microservice is responsible for handling and serving the contents of library assets of the DTaaS platform. It provides API endpoints for clients to query, and fetch these assets.</p> <p>This document provides instructions for using the library microservice.</p> <p>Please see assets for a suggested storage conventions of your library assets.</p> <p>Once the assets are stored in the library, you can access the server's endpoint by typing in the following URL: <code>http://foo.com/lib</code>.</p> <p>The URL opens a graphql playground. You can check the query schema and try sample queries here. You can also send graphql queries as HTTP POST requests and get responses.</p>"},{"location":"user/servers/lib/LIB-MS.html#api-queries","title":"API Queries","text":"<p>The library microservice services two API calls:</p> <ul> <li>Provide a list of contents for a directory</li> <li>Fetch a file from the available files</li> </ul> <p>The API calls are accepted over GraphQL and HTTP API end points. The format of the accepted queries are:</p>"},{"location":"user/servers/lib/LIB-MS.html#provide-list-of-contents-for-a-directory","title":"Provide list of contents for a directory","text":"<p>To retrieve a list of files in a directory, use the following GraphQL query.</p> <p>Replace <code>path</code> with the desired directory path.</p> <p>send requests to: https://foo.com/lib</p> GraphQL QueryGraphQL ResponseHTTP RequestHTTP Response <pre><code>query {\n  listDirectory(path: \"user1\") {\n    repository {\n      tree {\n        blobs {\n          edges {\n            node {\n              name\n              type\n            }\n          }\n        }\n        trees {\n          edges {\n            node {\n              name\n              type\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"listDirectory\": {\n      \"repository\": {\n        \"tree\": {\n          \"blobs\": {\n            \"edges\": []\n          },\n          \"trees\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"name\": \"common\",\n                  \"type\": \"tree\"\n                }\n              },\n              {\n                \"node\": {\n                  \"name\": \"data\",\n                  \"type\": \"tree\"\n                }\n              },\n              {\n                \"node\": {\n                  \"name\": \"digital twins\",\n                  \"type\": \"tree\"\n                }\n              },\n              {\n                \"node\": {\n                  \"name\": \"functions\",\n                  \"type\": \"tree\"\n                }\n              },\n              {\n                \"node\": {\n                  \"name\": \"models\",\n                  \"type\": \"tree\"\n                }\n              },\n              {\n                \"node\": {\n                  \"name\": \"tools\",\n                  \"type\": \"tree\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>POST /lib HTTP/1.1\nHost: foo.com\nContent-Type: application/json\nContent-Length: 388\n\n{\n  \"query\":\"query {\\n  listDirectory(path: \\\"user1\\\") {\\n    repository {\\n      tree {\\n        blobs {\\n          edges {\\n            node {\\n              name\\n              type\\n            }\\n          }\\n        }\\n        trees {\\n          edges {\\n            node {\\n              name\\n              type\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\"\n}\n</code></pre> <pre><code>HTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nConnection: close\nContent-Length: 306\nContent-Type: application/json; charset=utf-8\nDate: Tue, 26 Sep 2023 20:26:49 GMT\nX-Powered-By: Express\n{\"data\":{\"listDirectory\":{\"repository\":{\"tree\":{\"blobs\":{\"edges\":[]},\"trees\":{\"edges\":[{\"node\":{\"name\":\"data\",\"type\":\"tree\"}},{\"node\":{\"name\":\"digital twins\",\"type\":\"tree\"}},{\"node\":{\"name\":\"functions\",\"type\":\"tree\"}},{\"node\":{\"name\":\"models\",\"type\":\"tree\"}},{\"node\":{\"name\":\"tools\",\"type\":\"tree\"}}]}}}}}}\n</code></pre>"},{"location":"user/servers/lib/LIB-MS.html#fetch-a-file-from-the-available-files","title":"Fetch a file from the available files","text":"<p>This query receives directory path and send the file contents to user in response.</p> <p>To check this query, create a file <code>files/user2/data/welcome.txt</code> with content of <code>hello world</code>.</p> GraphQL RequestGraphQL ResponseHTTP RequestHTTP Response <pre><code>query {\n  readFile(path: \"user2/data/sample.txt\") {\n    repository {\n      blobs {\n        nodes {\n          name\n          rawBlob\n          rawTextBlob\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"readFile\": {\n      \"repository\": {\n        \"blobs\": {\n          \"nodes\": [\n            {\n              \"name\": \"sample.txt\",\n              \"rawBlob\": \"hello world\",\n              \"rawTextBlob\": \"hello world\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>POST /lib HTTP/1.1\nHost: foo.com\nContent-Type: application/json\nContent-Length: 217\n{\n  \"query\":\"query {\\n  readFile(path: \\\"user2/data/welcome.txt\\\") {\\n    repository {\\n      blobs {\\n        nodes {\\n          name\\n          rawBlob\\n          rawTextBlob\\n        }\\n      }\\n    }\\n  }\\n}\"\n}\n</code></pre> <pre><code>HTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nConnection: close\nContent-Length: 134\nContent-Type: application/json; charset=utf-8\nDate: Wed, 27 Sep 2023 09:17:18 GMT\nX-Powered-By: Express\n{\"data\":{\"readFile\":{\"repository\":{\"blobs\":{\"nodes\":[{\"name\":\"welcome.txt\",\"rawBlob\":\"hello world\",\"rawTextBlob\":\"hello world\"}]}}}}}\n</code></pre> <p>The path refers to the file path to look at: For example, user1 looks at files of user1; user1/functions looks at contents of functions/ directory.</p>"},{"location":"user/servers/lib/assets.html","title":"Reusable Assets","text":"<p>The reusability of digital twin assets makes it easy for users to work with the digital twins. The reusability of assets is a fundamental feature of the platform.</p>"},{"location":"user/servers/lib/assets.html#kinds-of-reusable-assets","title":"Kinds of Reusable Assets","text":"<p>The DTaaS software categorizes all the reusable library assets into five categories:</p> <p></p>"},{"location":"user/servers/lib/assets.html#functions","title":"Functions","text":"<p>The functions responsible for pre- and post-processing of: data inputs, data outputs, control outputs. The data science libraries and functions can be used to create useful function assets for the platform. In some cases, Digital Twin models require calibration prior to their use; functions written by domain experts along with right data inputs can make model calibration an achievable goal. Another use of functions is to process the sensor and actuator data of both Physical Twins and Digital Twins.</p>"},{"location":"user/servers/lib/assets.html#data","title":"Data","text":"<p>The data sources and sinks available to a digital twins. Typical examples of data sources are sensor measurements from Physical Twins, and test data provided by manufacturers for calibration of models. Typical examples of data sinks are visualization software, external users and data storage services. There exist special outputs such as events, and commands which are akin to control outputs from a Digital Twin. These control outputs usually go to Physical Twins, but they can also go to another Digital Twin.</p>"},{"location":"user/servers/lib/assets.html#models","title":"Models","text":"<p>The model assets are used to describe different aspects of Physical Twins and their environment, at different levels of abstraction. Therefore, it is possible to have multiple models for the same Physical Twin. For example, a flexible robot used in a car production plant may have structural model(s) which will be useful in tracking the wear and tear of parts. The same robot can have a behavioural model(s) describing the safety guarantees provided by the robot manufacturer. The same robot can also have a functional model(s) describing the part manufacturing capabilities of the robot.</p>"},{"location":"user/servers/lib/assets.html#tools","title":"Tools","text":"<p>The software tool assets are software used to create, evaluate and analyze models. These tools are executed on top of a computing platforms, i.e., an operating system, or virtual machines like Java virtual machine, or inside docker containers. The tools tend to be platform specific, making them less reusable than models. A tool can be packaged to run on a local or distributed virtual machine environments thus allowing selection of most suitable execution environment for a Digital Twin. Most models require tools to evaluate them in the context of data inputs. There exist cases where executable packages are run as binaries in a computing environment. Each of these packages are a pre-packaged combination of models and tools put together to create a ready to use Digital Twins.</p>"},{"location":"user/servers/lib/assets.html#digital-twins","title":"Digital Twins","text":"<p>These are ready to use digital twins created by one or more users. These digital twins can be reconfigured later for specific use cases.</p>"},{"location":"user/servers/lib/assets.html#file-system-structure","title":"File System Structure","text":"<p>Each user has their assets put into five different directories named above. In addition, there will also be common library assets that all users have access to. A simplified example of the structure is as follows:</p> <pre><code>workspace/\n  data/\n    data1/ (ex: sensor)\n      filename (ex: sensor.csv)\n      README.md\n    data2/ (ex: turbine)\n      README.md (remote source; no local file)\n    ...\n  digital_twins/\n    digital_twin-1/ (ex: incubator)\n      code and config\n      README.md (usage instructions)\n    digital_twin-2/ (ex: mass spring damper)\n      code and config\n      README.md (usage instructions)\n    digital_twin-3/ (ex: model swap)\n      code and config\n      README.md (usage instructions)\n    ...\n  functions/\n    function1/ (ex: graphs)\n      filename (ex: graphs.py)\n      README.md\n    function2/ (ex: statistics)\n      filename (ex: statistics.py)\n      README.md\n    ...\n  models/\n    model1/ (ex: spring)\n      filename (ex: spring.fmu)\n      README.md\n    model2/ (ex: building)\n      filename (ex: building.skp)\n      README.md\n    model3/ (ex: rabbitmq)\n      filename (ex: rabbitmq.fmu)\n      README.md\n    ...\n  tools/\n    tool1/ (ex: maestro)\n      filename (ex: maestro.jar)\n      README.md\n    ...\n  common/\n    data/\n    functions/\n    models/\n    tools/\n</code></pre> <p>Tip</p> <p>The DTaaS is agnostic to the format of your assets. The only requirement is that they are files which can be uploaded on the Library page. Any directories can be compressed as one file and uploaded. You can decompress the file into a directory from a Terminal or xfce Desktop available on the Workbench page.</p> <p>A recommended file system structure for storing assets is also available in DTaaS examples.</p>"},{"location":"user/servers/lib/assets.html#upload-assets","title":"Upload Assets","text":"<p>Users can upload assets into their workspace using Library page of the website.</p> <p></p> <p>You can go into a directory and click on the upload button to upload a file or a directory into your workspace. This asset is then available in all the workbench tools you can use. You can also create new assets on the page by clicking on new drop down menu. This is a simple web interface which allows you to create text-based files. You need to upload other files using upload button.</p> <p>The user workbench has the following services:</p> <ul> <li>Jupyter Notebook and Lab</li> <li>VS Code</li> <li>XFCE Desktop Environment available via VNC</li> <li>Terminal</li> </ul> <p>Users can also bring their DT assets into user workspaces from outside using any of the above mentioned services. The developers using git repositories can clone from and push to remote git servers. Users can also use widely used file transfer protocols such as FTP, and SCP to bring the required DT assets into their workspaces.</p>"},{"location":"user/website/index.html","title":"DTaaS Website Screenshots","text":"<p>This page contains a screenshot driven preview of the website serving the DTaaS software platform.</p>"},{"location":"user/website/index.html#login-to-enter-the-dtaas-software-platform","title":"Login to enter the DTaaS software platform","text":"<p>The screen presents with HTTP authentication form. You can enter the user credentials. If the DTaaS is being served over HTTPS secure communication protocol, the username and password are secure.</p>"},{"location":"user/website/index.html#start-the-authentication","title":"Start the Authentication","text":"<p>You are now logged into the DTaaS server. The DTaaS uses third-party authentication protocol known as OAuth. This protocol provides secure access to a DTaaS installation if users have a working active accounts at the selected OAuth service provider. The DTaaS uses Gitlab as OAuth provider.</p> <p></p> <p>You can see the Gitlab signin button. A click on this button takes you to Gitlab instance providing authentication for DTaaS.</p>"},{"location":"user/website/index.html#authenticate-at-gitlab","title":"Authenticate at Gitlab","text":"<p>The username and password authentication takes place on the gitlab website. Enter your username and password in the login form.</p> <p></p>"},{"location":"user/website/index.html#permit-dtaas-to-use-gitlab","title":"Permit DTaaS to Use Gitlab","text":"<p>The DTaaS application needs your permission to use your Gitlab account for authentication. Click on Authorize button.</p> <p></p> <p>After successful authentication, you will be redirected to the Library page of the DTaaS website.</p>"},{"location":"user/website/index.html#overview-of-menu-items","title":"Overview of menu items","text":"<p>The menu is hidden by default. Only the icons of menu items are visible. You can click on the  icon in the top-left corner of the page to see the menu.</p> <p></p> <p>There are three menu items:</p> <p>Library: for management of reusable library assets. You can upload, download, create and modify new files on this page.</p> <p>Digital Twins: for management of digital twins. You are presented with the Jupyter Lab page from which you can run the digital twins.</p> <p>Workbench: Not all digital twins can be managed within Jupyter Lab. You have more tools at your disposal on this page.</p>"},{"location":"user/website/index.html#library-tabs-and-their-help-text","title":"Library tabs and their help text","text":"<p>You can see the file manager and five tabs above the library manager. Each tab provides help text to guide users in the use of different directories in their workspace.</p> Functions <p>The functions responsible for pre- and post-processing of: data inputs, data outputs, control outputs. The data science libraries and functions can be used to create useful function assets for the platform. In some cases, Digital Twin models require calibration prior to their use; functions written by domain experts along with right data inputs can make model calibration an achievable goal. Another use of functions is to process the sensor and actuator data of both Physical Twins and Digital Twins.</p> Data <p>The data sources and sinks available to a digital twins. Typical examples of data sources are sensor measurements from  Physical Twins, and test data provided by manufacturers for calibration of models. Typical examples of data sinks are visualization software, external users and data storage services. There exist special outputs such as events, and commands which are akin to control outputs from a Digital Twin. These control outputs usually go to Physical Twins, but they can also go to another Digital Twin.</p> Models <p>The model assets are used to describe different aspects of Physical Twins and their environment, at different levels of abstraction. Therefore, it is possible to have multiple models for the same Physical Twin. For example, a flexible robot used in a car production plant may have structural model(s) which will be useful in tracking the wear and tear of parts. The same robot can have a behavioural model(s) describing the safety guarantees provided by the robot manufacturer. The same robot can also have a functional model(s) describing the part manufacturing capabilities of the robot.</p> Tools <p>The software tool assets are software used to create, evaluate and analyze models. These tools are executed on top of a computing platforms, i.e., an operating system, or virtual machines like Java virtual machine, or inside docker containers. The tools tend to be platform specific, making them less reusable than models. A tool can be packaged to run on a local or distributed virtual machine environments thus allowing selection of most suitable execution environment for a Digital Twin. Most models require tools to evaluate them in the context of data inputs. There exist cases where executable packages are run as binaries in a computing environment. Each of these packages are a pre-packaged combination of models and tools put together to create a ready to use Digital Twins.</p> Digital <p>These are ready to use digital twins created by one or more users. These digital twins can be reconfigured later for specific use cases.</p> <p>In addition to the five directories, there is also common directory in which five sub-directories exist. These sub-directories are: data, functions, models, tools and digital twins.</p> Common <p>The common directory again has four sub-directories: * data * functions * models * tools * digital twins The assets common to all users are placed in common.</p> <p>The items used by more than one user are placed in common. The items in the common directory are available to all users. Further explanation of directory structure and placement of reusable assets within the the directory structure is in the assets page</p> <p> The file manager is based on Jupyter notebook and all the tasks you can perform in the Jupyter Notebook can be undertaken here.</p>"},{"location":"user/website/index.html#digital-twins-page","title":"Digital Twins page","text":"<p>The digital twins page has three tabs and the central pane opens Jupyter lab. There are three tabs with helpful instructions on the suggested tasks you can undertake in the Create - Execute - Analyze life cycle phases of digital twin. You can see more explanation on the life cycle phases of digital twin.</p> Create <p>Create digital twins from tools provided within user workspaces. Each digital twin will have one directory. It is suggested that user provide one bash shell script to run their digital twin. Users can create the required scripts and other files from tools provided in Workbench page.</p> Execute <p>Digital twins are executed from within user workspaces. The given bash script gets executed from digital twin directory. Terminal-based digital twins can be executed from VSCode and graphical digital twins can be executed from VNC GUI. The results of execution can be placed in the data directory.</p> Analyze <p>The analysis of digital twins requires running of digital twin script from user workspace. The execution results placed within data directory are processed by analysis scripts and results are placed back in the data directory. These scripts can either be executed from VSCode and graphical results or can be executed from VNC GUI. The analysis of digital twins requires running of digital twin script from user workspace. The execution results placed within data directory are processed by analysis scripts and results are placed back in the data directory. These scripts can either be executed from VSCode and graphical results or can be executed from VNC GUI.</p> <p> The reusable assets (files) seen in the file manager are available in the Jupyter Lab. In addition, there is a git plugin installed in the Jupyter Lab using which you can link your files with the external git repositories.</p>"},{"location":"user/website/index.html#workbench","title":"Workbench","text":"<p>The workbench page provides links to four integrated tools.</p> <p></p> <p>The hyperlinks open in new browser tab. The screenshots of pages opened in new browser are:</p> <p></p> <p>Bug</p> <p>The Terminal hyperlink does not always work reliably. If you want terminal. Please use the tools dropdown in the Jupyter Notebook. The Terminal hyperlink does not always work reliably. If you want terminal. Please use the tools dropdown in the Jupyter Notebook.</p>"},{"location":"user/website/index.html#finally-logout","title":"Finally logout","text":"<p>You have to close the browser in order to completely exit the DTaaS software platform.</p>"}]}