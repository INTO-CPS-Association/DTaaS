@startuml
class FilesResolver {
  -filesService: IFilesService
  +listDirectory(path: string): Promise<Project>
  +readFile(path: string): Promise<Project>
}

interface IFilesService {
  listDirectory(path: string): Promise<Project>
  readFile(path: string): Promise<Project>
}

class FilesServiceFactory {
  -configService: ConfigService
  -gitlabFilesService: GitlabFilesService
  -localFilesService: LocalFilesService
  +create(): IFilesService
}

class GitlabFilesService {
  -configService: ConfigService
  -parseArguments(path: string): Promise<{ domain: string; parsedPath: string }>
  -sendRequest(query: string): Promise<Project>
  -executeQuery(path: string, getQuery: QueryFunction): Promise<Project>
  +listDirectory(path: string): Promise<Project>
  +readFile(path: string): Promise<Project>
}

class LocalFilesService {
  -configService: ConfigService
  -getFileStats(fullPath: string, file: string): Promise<Project>
  +listDirectory(path: string): Promise<Project>
  +readFile(path: string): Promise<Project>
}

class ConfigService {
  +get(propertyPath: string): any
}

FilesResolver --> IFilesService: uses
IFilesService <|.. GitlabFilesService: implements
IFilesService <|.. LocalFilesService: implements
FilesServiceFactory --> IFilesService: creates
FilesServiceFactory --> ConfigService: uses
GitlabFilesService --> ConfigService: uses
LocalFilesService --> ConfigService: uses
@enduml
