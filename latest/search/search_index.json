{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>The Digital Twin as a Service (DTaaS) software is useful to create and run digital twins. The digital twins that are running can be used as service by other users. These users need not be members of the DTaaS software platform itself.</p> <p>A brief overview of the software is available in this presentation and recorded video. There is also a research paper if you are interested in reading the scientific roadmap for this software.</p>"},{"location":"index.html#license","title":"License","text":"<p>This software is owned by The INTO-CPS Association and is available under the INTO-CPS License.</p> <p>The DTaaS software platform uses Tr\u00e6fik, ML Workspace, Grafana, InfluxDB and RabbitMQ open-source components. These software components have their own licenses.</p>"},{"location":"FAQ.html","title":"FAQ","text":"<p>Add FAQ using annotations plugin</p>"},{"location":"LICENSE.html","title":"LICENSE","text":"<p>--- Start of Definition of INTO-CPS Association Public License ---</p> <p>/  * This file is part of the INTO-CPS Association.  *  * Copyright (c) 2017-CurrentYear, INTO-CPS Association (ICA),  * c/o Peter Gorm Larsen, Aarhus University, Department of Engineering,  * Finlandsgade 22, 8200 Aarhus N, Denmark.  *  * All rights reserved.  *  * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 LICENSE OR  * THIS INTO-CPS ASSOCIATION PUBLIC LICENSE (ICAPL) VERSION 1.0.  * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES  * RECIPIENT'S ACCEPTANCE OF THE INTO-CPS ASSOCIATION PUBLIC LICENSE OR   * THE GPL VERSION 3, ACCORDING TO RECIPIENTS CHOICE.  *  * The INTO-CPS tool suite software and the INTO-CPS Association   * Public License (ICAPL) are obtained from the INTO-CPS Association, either   * from the above address, from the URLs: http://www.into-cps.org or  * in the INTO-CPS tool suite distribution.  * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.  *  * This program is distributed WITHOUT ANY WARRANTY; without  * even the implied warranty of  MERCHANTABILITY or FITNESS  * FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH  * IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF  * THE INTO-CPS ASSOCIATION PUBLIC LICENSE.  *  * See the full ICAPL conditions for more details.  *  /</p> <p>--- End of INTO-CPS Association Public License Header ---</p> <p>The ICAPL is a public license for the INTO-CPS tool suite with three modes/alternatives (GPL, ICA-Internal-EPL, ICA-External-EPL) for use and redistribution, in source and/or binary/object-code form:</p> <ul> <li> <p>GPL. Any party (member or non-member of the INTO-CPS Association) may use and    redistribute INTO-CPS tool suite under GPL version 3.</p> </li> <li> <p>Silver Level members of the INTO-CPS Association may also use and redistribute    the INTO-CPS tool suite under ICA-Internal-EPL conditions.</p> </li> <li> <p>Gold Level members of the INTO-CPS Association may also use and redistribute    The INTO-CPS tool suite under ICA-Internal-EPL or ICA-External-EPL conditions.</p> </li> </ul> <p>Definitions of the INTO-CPS Association Public license modes:</p> <ul> <li> <p>GPL = GPL version 3.</p> </li> <li> <p>ICA-Internal-EPL = These INTO-CPA Association Public license conditions together with  Internally restricted EPL, i.e., EPL version 1.0 with the Additional Condition   that use and redistribution by a member of the INTO-CPS Association is only allowed  within the INTO-CPS Association member's own organization (i.e., its own legal entity),  or for a member of the INTO-CPS Association paying a membership fee corresponding to   the size of the organization including all its affiliates, use and redistribution  is allowed within/between its affiliates.</p> </li> <li> <p>ICA-External-EPL = These INTO-CPA Association Public license conditions together with  Externally restricted EPL, i.e., EPL version 1.0 with the Additional Condition   that use and redistribution by a member of the INTO-CPS Association, or by a Licensed  Third Party Distributor having a redistribution agreement with that member,  to parties external to the INTO-CPS Association member\u2019s own organization (i.e., its own  legal entity) is only allowed in binary/object-code form, except the case of  redistribution to other members the INTO-CPS Association to which source is also   allowed to be distributed.</p> </li> </ul> <p>[This has the consequence that an external party who wishes to use the INTO-CPS Association in source form together with its own proprietary software in all cases must be a member of the INTO-CPS Association].</p> <p>In all cases of usage and redistribution by recipients, the following conditions also apply:</p> <p>a) Redistributions of source code must retain the above copyright notice,  all definitions, and conditions. It is sufficient if the ICAPL Header is  present in each source file, if the full ICAPL is available in a prominent  and easily located place in the redistribution.</p> <p>b) Redistributions in binary/object-code form must reproduce the above  copyright notice, all definitions, and conditions. It is sufficient if the  ICAPL Header and the location in the redistribution of the full ICAPL  are present in the documentation and/or other materials provided with the  redistribution, if the full ICAPL is available in a prominent and easily  located place in the redistribution.</p> <p>c) A recipient must clearly indicate its chosen usage mode of ICAPL,  in accompanying documentation and in a text file ICA-USAGE-MODE.txt,  provided with the distribution.</p> <p>d) Contributor(s) making a Contribution to the INTO-CPS Association thereby also makes a  Transfer of Contribution Copyright. In return, upon the effective date of  the transfer, ICA grants the Contributor(s) a Contribution License of the  Contribution. ICA has the right to accept or refuse Contributions.</p> <p>Definitions:</p> <p>\"Subsidiary license conditions\" means:</p> <p>The additional license conditions depending on the by the recipient chosen mode of ICAPL, defined by GPL version 3.0 for GPL, and by EPL for ICA-Internal-EPL and ICA-External-EPL.</p> <p>\"ICAPL\" means:</p> <p>INTO-CPS Association Public License version 1.0, i.e., the license defined here (the text between \"--- Start of Definition of INTO-CPS Association Public License ---\" and \"--- End of Definition of INTO-CPS Association Public License ---\", or later versions thereof.</p> <p>\"ICAPL Header\" means:</p> <p>INTO-CPS Association Public License Header version 1.2, i.e., the text between \"--- Start of Definition of INTO-CPS Association Public License ---\" and \"--- End of INTO-CPS Association Public License Header ---, or later versions thereof.</p> <p>\"Contribution\" means:</p> <p>a) in the case of the initial Contributor, the initial code and documentation  distributed under ICAPL, and</p> <p>b) in the case of each subsequent Contributor:    i) changes to the INTO-CPS tool suite, and   ii) additions to the INTO-CPS tool suite;</p> <p>where such changes and/or additions to the INTO-CPS tool suite originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the INTO-CPS tool suite by such Contributor itself or anyone acting on such Contributor's behalf.</p> <p>For Contributors licensing the INTO-CPS tool suite under ICA-Internal-EPL or ICA-External-EPL conditions, the following conditions also hold:</p> <p>Contributions do not include additions to the distributed Program which: (i) are separate modules of software distributed in conjunction with the INTO-CPS tool suite under their own license agreement, (ii) are separate modules which are not derivative works of the INTO-CPS tool suite, and (iii) are separate modules of software distributed in conjunction with the INTO-CPS tool suite under their own license agreement where these separate modules are merged with (weaved together with) modules of The INTO-CPS tool suite to form new modules that are distributed as object code or source code under their own license agreement, as allowed under the Additional Condition of internal distribution according to ICA-Internal-EPL and/or Additional Condition for external distribution according to ICA-External-EPL.</p> <p>\"Transfer of Contribution Copyright\" means that the Contributors of a Contribution transfer the ownership and the copyright of the Contribution to the INTO-CPS Association, the INTO-CPS Association Copyright owner, for inclusion in the INTO-CPS tool suite. The transfer takes place upon the effective date when the Contribution is made available on the INTO-CPS Association web site under ICAPL, by such Contributors themselves or anyone acting on such Contributors' behalf. The transfer is free of charge. If the Contributors or the INTO-CPS Association so wish, an optional Copyright transfer agreement can be signed between the INTO-CPS Association and the Contributors.</p> <p>\"Contribution License\" means a license from the INTO-CPS Association to the Contributors of the Contribution, effective on the date of the Transfer of Contribution Copyright, where the INTO-CPS Association grants the Contributors a non-exclusive, world-wide, transferable, free of charge, perpetual license, including sublicensing rights, to use, have used, modify, have modified, reproduce and or have reproduced the contributed material, for business and other purposes, including but not limited to evaluation, development, testing, integration and merging with other software and distribution. The warranty and liability disclaimers of ICAPL apply to this license.</p> <p>\"Contributor\" means any person or entity that distributes (part of) the INTO-CPS tool chain.</p> <p>\"The Program\" means the Contributions distributed in accordance with ICAPL.</p> <p>\"The INTO-CPS tool chain\" means the Contributions distributed in accordance with ICAPL.</p> <p>\"Recipient\" means anyone who receives the INTO-CPS tool chain under ICAPL, including all Contributors.</p> <p>\"Licensed Third Party Distributor\" means a reseller/distributor having signed a redistribution/resale agreement in accordance with ICAPL and the INTO-CPS  Association Bylaws, with a Gold Level organizational member which is not an  Affiliate of the reseller/distributor, for distributing a product containing  part(s) of the INTO-CPS tool suite. The Licensed Third Party Distributor shall  only be allowed further redistribution to other resellers if the Gold Level  member is granting such a right to it in the redistribution/resale agreement  between the Gold Level member and the Licensed Third Party Distributor.</p> <p>\"Affiliate\" shall mean any legal entity, directly or indirectly, through one or more intermediaries, controlling or controlled by or under common control with any other legal entity, as the case may be. For purposes of this definition, the term \"control\" (including the terms \"controlling,\" \"controlled by\" and \"under common control with\") means the possession, direct or indirect, of the power to direct or cause the direction of the management and policies of a legal entity, whether through the ownership of voting securities, by contract or otherwise.</p> <p>NO WARRANTY</p> <p>EXCEPT AS EXPRESSLY SET FORTH IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF ICAPL, THE INTO-CPS ASSOCIATION IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the INTO-CPS tool suite and assumes all risks associated with its exercise of rights under ICAPL , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.</p> <p>DISCLAIMER OF LIABILITY</p> <p>EXCEPT AS EXPRESSLY SET FORTH IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS OF ICAPL, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE INTO-CPS TOOL  SUITE OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED  OF THE POSSIBILITY OF SUCH DAMAGES.</p> <p>A Contributor licensing the INTO-CPS tool suite under ICA-Internal-EPL or ICA-External-EPL may choose to distribute (parts of) the INTO-CPS tool suite  in object code form under its own license agreement, provided that:</p> <p>a) it complies with the terms and conditions of ICAPL; or for the case of redistribution of the INTO-CPS tool suite together with proprietary code it is a dual license where the INTO-CPS tool suite parts are distributed under ICAPL compatible conditions and the proprietary code is distributed under proprietary license conditions; and</p> <p>b) its license agreement:    i) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;   ii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;  iii) states that any provisions which differ from ICAPL are offered by that Contributor alone and not by any other party; and   iv) states from where the source code for the INTO-CPS tool suite is available, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.</p> <p>When the INTO-CPS tool suite is made available in source code form:</p> <p>a) it must be made available under ICAPL; and</p> <p>b) a copy of ICAPL must be included with each copy of the INTO-CPS tool suite.</p> <p>c) a copy of the subsidiary license associated with the selected mode of ICAPL must be included with each copy of the INTO-CPS tool suite.</p> <p>Contributors may not remove or alter any copyright notices contained within The INTO-CPS tool suite.</p> <p>If there is a conflict between ICAPL and the subsidiary license conditions, ICAPL has priority.</p> <p>This Agreement is governed by the laws of Denmark. The place of jurisdiction for all disagreements related to this Agreement, is Aarhus, Denmark.</p> <p>The EPL 1.0 license definition has been obtained from: http://www.eclipse.org/legal/epl-v10.html. It is also reproduced in the INTO-CPS distribution.</p> <p>The GPL Version 3 license definition has been obtained from http://www.gnu.org/copyleft/gpl.html. It is also reproduced in the INTO-CPS distribution.</p> <p>--- End of Definition of INTO-CPS Association Public License ---</p>"},{"location":"PUBLISH.html","title":"Project Documentation","text":"<p>This file contains instructions for creation, compilation and publication of project documentation.</p> <p>The documentation system is based on Material for Mkdocs. The documentation is generated based on the configuration files:</p> <ul> <li>mkdocs.yml: used for generating online documentation which is hosted on the web</li> <li>mkdocs_offline.yml: used for generating offline documentation that can be downloaded and used on user computer.</li> </ul> <p>Install Mkdocs using the following command.</p> <pre><code>pip install -r docs/requirements.txt\n</code></pre>"},{"location":"PUBLISH.html#create-documentation","title":"Create documentation","text":"<p>You can add, and edit the markdown files in <code>docs/</code> directory to update the documentation. There is a facility to check the status of your documentation by using:</p> <pre><code>mkdocs serve --config-file mkdocs.yml\n</code></pre>"},{"location":"PUBLISH.html#publish-documentation","title":"Publish documentation","text":"<p>You can compile and place the html version of documentation on the <code>webpage-docs</code> branch of the codebase.</p> <pre><code>source script/docs.sh [version]\n</code></pre> <p>The command takes an optional version parameter. This version parameter is needed for making a release. Otherwise, the documentation gets published with the latest version tag. This command makes a new commit on <code>webpage-docs</code> branch. You need to push the branch to upstream.</p> <pre><code>manual step: git push -f prasad-public\n</code></pre> <p>The github pages system serves the project documentation from this branch.</p>"},{"location":"bugs.html","title":"Bugs","text":""},{"location":"bugs.html#third-party-software","title":"Third-Party Software","text":"<p>We use third-party software which have certain known issues. Some of the issues are listed below.</p>"},{"location":"bugs.html#ml-workspace","title":"ML Workspace","text":"<ul> <li>the docker container loses network connectivity after three days. The only known solution is to restart the docker container. You don't need to restart the complete DTaaS platform, restart of the docker contaienr of ml-workspace is sufficient.</li> <li>the terminal tool doesn't seem to have the ability to refresh itself. If there is an issue, the only solution is to close and reopen the terminal from \"open tools\" drop down of notebook</li> <li>terminal app does not show at all after some time: terminal always comes if it is open from drop-down menu of Jupyter Notebook, but not as a direct link.</li> </ul>"},{"location":"thanks.html","title":"Thanks","text":""},{"location":"thanks.html#contributors","title":"Contributors","text":"<p>code contributors</p>"},{"location":"thanks.html#documentation","title":"Documentation","text":"<ol> <li>Talasila, P., Gomes, C., Mikkelsen, P. H., Arboleda, S. G., Kamburjan, E., &amp; Larsen, P. G. (2023). Digital Twin as a Service (DTaaS): A Platform for Digital Twin Developers and Users. arXiv preprint arXiv:2305.07244.</li> </ol>"},{"location":"admin/client/CLIENT.html","title":"Host the DTaaS Client Website","text":"<p>To host DTaaS client website on your server, follow these steps:</p> <ul> <li> <p>The <code>build</code> folder contains all the optimized static files that are ready for deployment.</p> </li> <li> <p>Locate the file <code>build/env.js</code> and replace the example values to match your infrastructure. The constructed links will be \"<code>REACT_APP_URL</code>/<code>REACT_APP_URL_BASENAME</code>/<code>{username}</code>/<code>{Endpoint}</code>\". See the definitions below:</p> <pre><code>window.env = {\n  REACT_APP_ENVIRONMENT: \"prod | dev\",\n  REACT_APP_URL: \"URL for the gateway\",\n  REACT_APP_URL_BASENAME: \"Base URL for the client website\"(optional),\n  REACT_APP_URL_DTLINK: \"Endpoint for the Digital Twin\",\n  REACT_APP_URL_LIBLINK: \"Endpoint for the Library Assets\",\n  REACT_APP_WORKBENCHLINK_TERMINAL: \"Endpoint for the terminal link\",\n  REACT_APP_WORKBENCHLINK_VNCDESKTOP: \"Endpoint for the VNC Desktop link\",\n  REACT_APP_WORKBENCHLINK_VSCODE: \"Endpoint for the VS Code link\",\n  REACT_APP_WORKBENCHLINK_JUPYTERLAB: \"Endpoint for the Jupyter Lab link\",\n  REACT_APP_WORKBENCHLINK_JUPYTERNOTEBOOK:\n    \"Endpoint for the Jupyter Notebook link\",\n};\n\n// Example values with no base URL. Trailing and ending slashes are optional.\nwindow.env = {\n  REACT_APP_ENVIRONMENT: 'dev',\n  REACT_APP_URL: 'https://foo.com/',\n  REACT_APP_URL_BASENAME: '',\n  REACT_APP_URL_DTLINK: '/lab',\n  REACT_APP_URL_LIBLINK: '',\n  REACT_APP_WORKBENCHLINK_TERMINAL: '/terminals/main',\n  REACT_APP_WORKBENCHLINK_VNCDESKTOP: '/tools/vnc/?password=vncpassword',\n  REACT_APP_WORKBENCHLINK_VSCODE: '/tools/vscode/',\n  REACT_APP_WORKBENCHLINK_JUPYTERLAB: '/lab',\n  REACT_APP_WORKBENCHLINK_JUPYTERNOTEBOOK: '',\n};\n</code></pre> </li> <li> <p>Copy the entire contents of the build folder to the root directory of your server where you want to deploy the app. You can use FTP, SFTP, or any other file transfer protocol to transfer the files.</p> </li> <li> <p>Make sure your server is configured to serve static files. This can vary depending on the server technology you are using, but typically you will need to configure your server to serve files from a specific directory.</p> </li> <li> <p>Once the files are on your server, you should be able to access your app by visiting your server's IP address or domain name in a web browser.</p> </li> </ul> <p> The website depends on Traefik and ML Workspace components to be available. Otherwise, you only get a skeleton non-functional website.</p>"},{"location":"admin/servers/lib/LIB-MS.html","title":"Host Library Microservice","text":"<p>The library microservice is designed to manage and serve files, functions, and models to users, allowing them to access and interact with various resources.</p> <p>This document provides instructions for running the library microservice.</p>"},{"location":"admin/servers/lib/LIB-MS.html#setup-the-file-system","title":"Setup the File System","text":"<p>The users expect the following file system structure for their reusable assets.</p> <p></p>"},{"location":"admin/servers/lib/LIB-MS.html#setup-microservice","title":"Setup Microservice","text":"<p>To set up the lib microservice, follow these steps:</p> <pre><code>git clone https://github.com/INTO-CPS-Association/DTaaS.git\ncd DTaaS/server/lib\nyarn install   # Install the required dependencies\n</code></pre>"},{"location":"admin/servers/lib/LIB-MS.html#environment-variables","title":"Environment Variables","text":"<p>To set up the environment variables for the lib microservice, create a new file named .env in the <code>servers/lib</code> folder. Then, add the following variables and their respective values. Below you can see and how, with included examples:</p> <pre><code>PORT='4001'\nMODE='local' or 'gitlab'\nLOCAL_PATH='/Users/&lt;Username&gt;/DTaaS/files'\nGITLAB_GROUP='dtaas'\nGITLAB_URL='https://gitlab.com/api/graphql'\nTOKEN='123-sample-token'\nAPOLLO_PATH='/lib' or ''\nGRAPHQL_PLAYGROUND='false' or 'true'\n</code></pre> <p>Replace the default values the appropriate values for your setup.</p> <p>NOTE:</p> <ol> <li>When _MODE=local, only LOCAL_PATH is used. Other environment variables are unused.</li> <li>When MODE=gitlab, GITLAB_URL, TOKEN, and GITLAB_GROUP are used; LOCAL_PATH is unused.</li> </ol>"},{"location":"admin/servers/lib/LIB-MS.html#start-microservice","title":"Start Microservice","text":"<pre><code>yarn install\nyarn build\nyarn start\n</code></pre> <p>The lib microservice is now running and ready to serve files, functions, and models.</p> <p>Users can access the library microservice at URL: <code>http://localhost:&lt;PORT&gt;/lib</code>.</p>"},{"location":"admin/servers/lib/LIB-MS.html#modes-of-operation","title":"Modes of Operation","text":"<p>The library microservice hides the mode of operation from the users. The files can come from two sources:</p> <ol> <li>A directory on the server machine hosting DTaaS (<code>mode=local</code>)</li> <li>A gitlab group on a gitlab instance (<code>mode=gitlab</code>). The gitlab can either be a community gitlab or your own private gitlab instance.</li> </ol>"},{"location":"user/features.html","title":"Features","text":"<p>Each installation of DTaaS platform comes with the features highlighted in the following picture.</p> <p></p> <p>All the users have dedicated workspaces. These workspaces are dockerized versions of Linux Desktops. The user desktops are isolated so the installations and customizations done in one user workspace do not effect the other user workspaces.</p> <p>Each user workspace comes with some development tools pre-installed. These tools are directly accessible from web browser. The following tools are available at present:</p> Tool Advantage Jupyter Lab Provides flexible creation and use of digital twins and their components from web browser. All the native Jupyterlab usecases are supported here. Jupyter Notebook Useful for web-based management of their files (library assets) VS Code in the browser A popular IDE for software development. Users can develop their digital twin-related assets here. ungit An interactive git client. Users can work with git repositories from web browser <p>In addition, users have access to xfce-based remote desktop via VNC client. The VNC client is available right in the web browser. The xfce supported desktop software can also be run in their workspace.</p> <p>The DTaaS software platform has some pre-installed services available. The currently available services are:</p> Service Advantage InfluxDB time-series database primarly for storing time-series data from physical twins. The digital twins can use an already existing data. Users can also create visualization dashboards for their digital twins. RabbitMQ communication broker for communication between physical and digital twins Grafana Users can create visualization dashboards for their digital twins. <p>In addition, the workspaces are connected to the Internet so all the Digital Twins run within their workspace can interact with both the internal and external services.</p> <p>The users can publish and reuse the digital twin assets available on the platform. In addition, users can run their digital twins and make these live digital twins available as services to their clients. The clients need not be users of the DTaaS software installation.</p>"},{"location":"user/digital-twins/lifecycle.html","title":"Lifecycle","text":"<p>Lifecycle image and copy of explanation from the paper.</p> <p></p> <p></p>"},{"location":"user/digital-twins/templates.html","title":"Templates","text":"<p>Explain the scripting conventions and their execution using three water tank example. Highlight only the scripts and hide the details of the example.</p>"},{"location":"user/examples/index.html","title":"Index","text":"<p>The examples are hosted in DTaaS examples repository</p>"},{"location":"user/examples/incubator/index.html","title":"Index","text":"<p>Installation of required python packages for the Incubator demo</p> <pre><code>pip install pyhocon\npip install influxdb_client\npip install scipy pip install pandas  pip install pika  pip install oomodelling pip install control  pip install filterpy pip install sympy  pip install docker  </code></pre> <p>start rabbitmq server and create a rabbitmq account with,</p> <pre><code>name: incubator  \npassword:incubator   \nwith access to the virtual host \"/\"\n</code></pre> <pre><code>docker run -d \\\n--name rabbitmq-server \\\n-p 15672:15672 -p 5672:5672 \\\nrabbitmq:3-management\n\ndocker exec rabbitmq-server rabbitmqctl add_user incubator incubator\ndocker exec rabbitmq-server rabbitmqctl set_permissions -p \"/\" incubator \".*\" \".*\" \".*\"\n</code></pre> <p>Access InfluxDB running on another machine. Remember that InfluxDB works only on a distinct sub-domain name like <code>influx.foo.com</code>, but not on <code>foo.com/influx</code>.</p> <pre><code>ssh -i /vagrant/vagrant -fNT -L 40000:localhost:80 vagrant@influx.server2.com\n</code></pre> <p>Update the rabbitmq-server and influxdb configuration in </p> <pre><code>/home/vagrant/dt/1/incubator/example_digital-twin_incubator/software/startup.conf\n</code></pre> <p>select (comment / uncomment) functions in  </p> <pre><code>/home/vagrant/dt/1/incubator/example_digital-twin_incubator/software/startup/start_all_services.py\n</code></pre> <p>Start the program</p> <pre><code>export PYTHONPATH=\"${PYTHONPATH}:/home/vagrant/dt/1/incubator/example_digital-twin_incubator/software/incubator\"\ncd /home/vagrant/dt/1/incubator/example_digital-twin_incubator/software\npython3 -m startup.start_all_services\n</code></pre>"},{"location":"user/servers/lib/LIB-MS.html","title":"Library Microservice","text":"<p>The lib microservice is responsible for handling and serving the contents of library assets of the DTaaS platform. It provides API endpoints for clients to query, and fetch these assets.</p> <p>This document provides instructions for using the library microservice.</p> <p>Please see assets for a suggested storage conventions of your library assets.</p> <p>Once the assets are stored in the library, you can access the server's endpoint by typing in the following URL: <code>http://foo.com/lib</code>.</p> <p>The URL opens a graphql playground. You can check the query schema and try sample queries here. You can also send graphql queries as HTTP POST requests and get responses.</p>"},{"location":"user/servers/lib/LIB-MS.html#the-graphql-queries","title":"The GraphQL Queries","text":"<p>The library microservice services two graphql requests:</p> <ul> <li>Provide a list of contents for a directory</li> <li>Fetch a file from the available files</li> </ul> <p>The format of the accepted queries are:</p>"},{"location":"user/servers/lib/LIB-MS.html#provide-list-of-contents-for-a-directory","title":"Provide list of contents for a directory","text":"<p>send requests to: https://foo.com/lib</p> GraphQL QueryGraphQL ResponseHTTP Request HTTP Response  <pre><code>query {\n  listDirectory(path: \"user1\") {\n    repository {\n      tree {\n        blobs {\n          edges {\n            node {\n              name\n              type\n            }\n          }\n        }\n        trees {\n          edges {\n            node {\n              name\n              type\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"listDirectory\": {\n      \"repository\": {\n        \"tree\": {\n          \"blobs\": {\n            \"edges\": []\n          },\n          \"trees\": {\n            \"edges\": [\n              {\n                \"node\": {\n                  \"name\": \"common\",\n                  \"type\": \"tree\"\n                }\n              },\n              {\n                \"node\": {\n                  \"name\": \"data\",\n                  \"type\": \"tree\"\n                }\n              },\n              {\n                \"node\": {\n                  \"name\": \"digital twins\",\n                  \"type\": \"tree\"\n                }\n              },\n              {\n                \"node\": {\n                  \"name\": \"functions\",\n                  \"type\": \"tree\"\n                }\n              },\n              {\n                \"node\": {\n                  \"name\": \"models\",\n                  \"type\": \"tree\"\n                }\n              },\n              {\n                \"node\": {\n                  \"name\": \"tools\",\n                  \"type\": \"tree\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>POST /lib\nHost: foo.com:&lt;PORT&gt;\nContent-Type:application/json\nUser-Agent:Mozilla\nAccept:_/_\n\nquery {\n  listDirectory(path: \"user2\") {\n    repository {\n      tree {\n        blobs {\n          edges {\n            node {\n              name\n\n            }\n          }\n        }\n        trees {\n          edges {\n            node {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>200 OK\naccess-control-allow-origin: \\*\nconnection: keep-alive\ncontent-length: 76\ncontent-type: application/json; charset=utf-8\ndate: Mon, 15 May 2023 10:13:37 GMT\netag: ................\nkeep-alive: timeout=5\nx-powered-by: Express\n\n{\n  \"data\": {\n    \"listDirectory\": {\n      \"repository\": {\n        \"tree\": {\n          \"blobs\": {\n              \"edges\": []\n          },\n        \"trees\": {\n            \"edges\": [\n              {\n                \"node\": {\n                    \"name\": \"data\"\n                }\n              },\n              {\n                \"node\": {\n                    \"name\": \"digital twins\"\n                  }\n              },\n              {\n                \"node\": {\n                    \"name\": \"functions\"\n                }\n              },\n              {\n                \"node\": {\n                    \"name\": \"models\"\n                }\n              },\n              {\n                \"node\": {\n                    \"name\": \"tools\"\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"user/servers/lib/LIB-MS.html#fetch-a-file-from-the-available-files","title":"Fetch a file from the available files","text":"GraphQL RequestGraphQL ResponseHTTP Request HTTP Response  <pre><code>query {\n  readFile(path: \"user2/data/sample.txt\") {\n    repository {\n      blobs {\n        nodes {\n          name\n          rawBlob\n          rawTextBlob\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"readFile\": {\n      \"repository\": {\n        \"blobs\": {\n          \"nodes\": [\n            {\n              \"name\": \"sample.txt\",\n              \"rawBlob\": \"hello world\",\n              \"rawTextBlob\": \"hello world\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>POST /lib\nHost: foo.com:&lt;PORT&gt;\nContent-Type:application/json\nUser-Agent:Mozilla\nAccept:*/*\n\n{\n\"query\":\n  query{\n    readFile(path:\"user2/data/sample.txt\"){\n      repository{\n        blobs{\n          nodes{\n            name\n            rawBlob\n            rawTextBlob\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>200 OK\naccess-control-allow-origin: *\nconnection: keep-alive\ncontent-length: 76\ncontent-type: application/json; charset=utf-8\ndate: Mon, 15 May 2023 10:13:37 GMT\netag: ................\nkeep-alive: timeout=5\nx-powered-by: Express\n\n{\n  \"data\": {\n    \"readFile\": {\n      \"repository\": {\n        \"blobs\": {\n          \"nodes\": [\n            {\n              \"name\": \"sample.txt\",\n              \"rawBlob\": \"welcome hello world\",\n              \"rawTextBlob\": \"hello world\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>The path refers to the file path to look at: For example, user1 looks at files of user1; user1/functions looks at contents of functions/ directory.</p>"},{"location":"user/servers/lib/assets.html","title":"Reusable Assets","text":"<p>The reusability of digital twin assets makes it easy for users to work with the digital twins. The reusability of assets is a fundamental feature of the platform.</p>"},{"location":"user/servers/lib/assets.html#kinds-of-reusable-assets","title":"Kinds of Reusable Assets","text":"<p>The DTaaS software categorizes all the reusable library assets into five categories:</p>"},{"location":"user/servers/lib/assets.html#functions","title":"Functions","text":"<p>The functions responsible for pre- and post-processing of: data inputs, data outputs, control outputs. The data science libraries and functions can be used to create useful function assets for the platform. In some cases, Digital Twin models require calibration prior to their use; functions written by domain experts along with right data inputs can make model calibration an achievable goal. Another use of functions is to process the sensor and actuator data of both Physical Twins and Digital Twins.</p>"},{"location":"user/servers/lib/assets.html#data","title":"Data","text":"<p>The data sources and sinks available to a digital twins. Typical examples of data sources are sensor measurements from  Physical Twins, and test data provided by manufacturers for calibration of models. Typical examples of data sinks are visualization software, external users and data storage services. There exist special outputs such as events, and commands which are akin to control outputs from a Digital Twin. These control outputs usually go to Physical Twins, but they can also go to another Digital Twin.</p>"},{"location":"user/servers/lib/assets.html#models","title":"Models","text":"<p>The model assets are used to describe different aspects of Physical Twins and their environment, at different levels of abstraction. Therefore, it is possible to have multiple models for the same Physical Twin. For example, a flexible robot used in a car production plant may have structural model(s) which will be useful in tracking the wear and tear of parts. The same robot can have a behavioural model(s) describing the safety guarantees provided by the robot manufacturer. The same robot can also have a functional model(s) describing the part manufacturing capabilities of the robot.</p>"},{"location":"user/servers/lib/assets.html#tools","title":"Tools","text":"<p>The software tool assets are software used to create, evaluate and analyze models. These tools are executed on top of a computing platforms, i.e., an operating system, or virtual machines like Java virtual machine, or inside docker containers. The tools tend to be platform specific, making them less reusable than models.  A tool can be packaged to run on a local or distributed virtual machine environments thus allowing selection of most suitable execution environment for a Digital Twin.  Most models require tools to evaluate them in the context of data inputs.  There exist cases where executable packages are run as binaries in a computing environment. Each of these packages are a pre-packaged combination of models and tools put together to create a ready to use Digital Twins.</p>"},{"location":"user/servers/lib/assets.html#digital-twins","title":"Digital Twins","text":"<p>These are ready to use digital twins created by one or more users. These digital twins can be reconfigured later for specific use cases.</p>"},{"location":"user/servers/lib/assets.html#file-system-structure","title":"File System Structure","text":"<p>Each user has their assets put into five different directories named above. In addition, there will also be common library assets that all users have access to. A simplified example of the structure is as follows:</p> <pre><code>lib/\n  data/\n    data1/ (ex: sensor)\n      filename (ex: sensor.csv)\n      README.md\n    data2/ (ex: turbine)\n      README.md (remote source; no local file)\n    ...\n  digital twins/\n    digital twin-1/ (ex: incubator)\n      code and config\n      README.md (usage instructions)\n    digital twin-2/ (ex: mass spring damper)\n      code and config\n      README.md (usage instructions)\n    digital twin-3/ (ex: model swap)\n      code and config\n      README.md (usage instructions)\n    ...\n  functions/\n    function1/ (ex: graphs)\n      filename (ex: graphs.py)\n      README.md\n    function2/ (ex: statistics)\n      filename (ex: statistics.py)\n      README.md\n    ...\n  models/\n    model1/ (ex: spring)\n      filename (ex: spring.fmu)\n      README.md\n    model2/ (ex: building)\n      filename (ex: building.skp)\n      README.md\n    model3/ (ex: rabbitmq)\n      filename (ex: rabbitmq.fmu)\n      README.md\n    ...\n  tools/\n    tool1/ (ex: maestro)\n      filename (ex: maestro.jar)\n      README.md\n    ...\n  common/\n    data/\n    functions/\n    models/\n    tools/\n</code></pre> <p>A recommended file system structure for storing assets is also available in DTaaS examples.</p>"},{"location":"user/servers/lib/assets.html#create-assets","title":"Create Assets","text":"<p>The DTaaS software allows users to create new library assets on the platform.</p> <p></p> <p>Users can use authoring tools from their own workspace to create and publish new assets. User workspaces are private and are not shared with other users. Thus any licensed software tools installed in their workspace is only available to them.</p>"},{"location":"user/website/index.html","title":"Website","text":"<p>This page contains a screenshot driven preview of the website.</p>"},{"location":"user/website/index.html#login-to-enter-the-dtaas-software-platform","title":"Login to enter the DTaaS software platform","text":"<p>The screen presents with HTTP authentication form. You can enter the user credentials. You will be using HTTPS secure communication so the username and password are secure.</p>"},{"location":"user/website/index.html#enter-username-again","title":"Enter username again","text":"<p>You are now logged into the server. You can enter the same username again to log into your workspace.</p>"},{"location":"user/website/index.html#overview-of-menu-items","title":"Overview of menu items","text":"<p>The menu is hidden by default. Only the icons of menu items are visible. You can click on the  icon in the top-left corner of the page to see the menu.</p> <p></p> <p>There are three menu items:</p> <p>Library: for management of reusable library assets. You can upload, download, create and modify new files on this page.</p> <p>Digital Twins: for management of digital twins. You are presented with Jupyter Lab page from which you can run the digital twins.</p> <p>Workbench: Not all digital twins can be managed within Jupyter Lab. You have more tools at your disposal on this page.</p>"},{"location":"user/website/index.html#library-tabs-and-their-help-text","title":"Library tabs and their help text","text":"<p>You can see the file manager and five tabs above the library manager. Each tab provides help text to guide users in the use of different directories in their workspace.</p> Functions <p>The functions responsible for pre- and post-processing of: data inputs, data outputs, control outputs. The data science libraries and functions can be used to create useful function assets for the platform.</p> <p>In some cases, Digital Twin models require calibration prior to their use; functions written by domain experts along with right data inputs can make model calibration an achievable goal. Another use of functions is to process the sensor and actuator data of both Physical Twins and Digital Twins. ```</p> Data <p>The data sources and sinks available to a digital twins. Typical examples of data sources are sensor measurements from  Physical Twins, and test data provided by manufacturers for calibration of models. Typical examples of data sinks are visualization software, external users and data storage services. There exist special outputs such as events, and commands which are akin to control outputs from a Digital Twin. These control outputs usually go to Physical Twins, but they can also go to another Digital Twin.</p> Models <p>The model assets are used to describe different aspects of Physical Twins and their environment, at different levels of abstraction. Therefore, it is possible to have multiple models for the same Physical Twin. For example, a flexible robot used in a car production plant may have structural model(s) which will be useful in tracking the wear and tear of parts. The same robot can have a behavioural model(s) describing the safety guarantees provided by the robot manufacturer. The same robot can also have a functional model(s) describing the part manufacturing capabilities of the robot.</p> Tools <p>The software tool assets are software used to create, evaluate and analyze models. These tools are executed on top of a computing platforms, i.e., an operating system, or virtual machines like Java virtual machine, or inside docker containers. The tools tend to be platform specific, making them less reusable than models. </p> <p>A tool can be packaged to run on a local or distributed virtual machine environments thus allowing selection of most suitable execution environment for a Digital Twin. </p> <p>Most models require tools to evaluate them in the context of data inputs.  There exist cases where executable packages are run as binaries in a computing environment. Each of these packages are a pre-packaged combination of models and tools put together to create a ready to use Digital Twins.</p> Digital <p>These are ready to use digital twins created by one or more users. These digital twins can be reconfigured later for specific use cases.</p> <p>In addition to the five directories, there is also common directory in which five sub-directories exist. These sub-directories are: data, functions, models, tools and digital twins.</p> Common <p>The common directory again has four sub-directories:</p> <ul> <li>data</li> <li>functions</li> <li>models</li> <li>tools</li> <li>digital twins</li> </ul> <p>The assets common to all users are placed in common.</p> <p>The items used by more than one user are placed in common. The items in the common directory are available to all users. Further explanation of directory structure and placement of reusable assets within the the directory structure is in the assets page</p> <p> The file manager is based on Jupyter Notebook and all the tasks you can perform in the Jupyter Notebook can be undertaken here.</p>"},{"location":"user/website/index.html#digital-twins-page","title":"Digital Twins page","text":"<p>The digital twins page has three tabs and the central pane opens Jupyter Lab. There are three tabs with helpful instructions on the suggested tasks you can undertake in the Create - Execute - Analyze life cycle phases of digital twin. You can see more explanation on the life cycle phases of digital twin.</p> Create <p>Create digital twins from tools provided within user workspaces. Each digital twin will have one directory. It is suggested that user provide one bash shell script to run their digital twin. Users can create the required scripts and other files from tools provided in Workbench page.</p> Execute <p>Digital twins are executed from within user workspaces. The given bash script gets executed from digital twin directory. Terminal-based digital twins can be executed from VSCode and graphical digital twins can be executed from VNC GUI. The results of execution can be placed in the data directory.</p> Analyze <p>The analysis of digital twins requires running of digital twin script from user workspace. The execution results placed within data directory are processed by analysis scripts and results are placed back in the data directory. These scripts can either be executed from VSCode and graphical results or can be executed from VNC GUI.</p> <p> The reusable assets (files) seen in the file manager are available in the Jupyter Lab. In addition, there is a git plugin installed in the Jupyter Lab using which you can link your files with the external git repositories.</p>"},{"location":"user/website/index.html#workbench","title":"Workbench","text":"<p>The workbench page provides links to four integrated tools.</p> <p></p> <p>The hyperlinks open in new browser tab. The screenshots of pages opened in new browser are:</p> <p></p> <p> The Terminal hyperlink does not always work reliably. If you want terminal. Please use the tools dropdown in the Jupyter Notebook.</p>"},{"location":"user/website/index.html#finally-logout","title":"Finally logout","text":"<p>You have to close the browser in order to completely exit the DTaaS software platform.</p>"}]}